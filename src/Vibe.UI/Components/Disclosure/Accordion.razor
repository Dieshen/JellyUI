@inherits Vibe.UI.Base.ThemedComponentBase

<div class="@CombinedClass" @attributes="AdditionalAttributes">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>

@code {
    /// <summary>
    /// Gets or sets the accordion items
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the accordion type
    /// </summary>
    [Parameter]
    public AccordionType Type { get; set; } = AccordionType.Single;

    /// <summary>
    /// Gets or sets whether multiple items can be expanded at once
    /// Only applicable when Type is set to Multiple
    /// </summary>
    [Parameter]
    public bool AllowMultiple { get; set; }

    /// <summary>
    /// Gets or sets whether to collapse other items when a new one is expanded
    /// Only applicable when Type is set to Single
    /// </summary>
    [Parameter]
    public bool CollapseOthers { get; set; } = true;

    /// <summary>
    /// Gets or sets the callback for when an item is expanded or collapsed
    /// </summary>
    [Parameter]
    public EventCallback<AccordionItemEventArgs> OnItemStateChanged { get; set; }

    /// <inheritdoc/>
    protected override string ComponentClass => "vibe-accordion";

    private HashSet<string> _expandedItems = new();

    internal async Task ToggleItem(string itemId, bool isExpanded)
    {
        if (Type == AccordionType.Single && isExpanded && CollapseOthers)
        {
            // Collapse other items
            _expandedItems.Clear();
        }

        if (isExpanded)
        {
            _expandedItems.Add(itemId);
        }
        else
        {
            _expandedItems.Remove(itemId);
        }

        if (OnItemStateChanged.HasDelegate)
        {
            await OnItemStateChanged.InvokeAsync(new AccordionItemEventArgs(itemId, isExpanded));
        }

        StateHasChanged();
    }

    internal bool IsItemExpanded(string itemId)
    {
        return _expandedItems.Contains(itemId);
    }
    
    /// <summary>
    /// Accordion types
    /// </summary>
    public enum AccordionType
    {
        /// <summary>
        /// Only one item can be expanded at a time
        /// </summary>
        Single,
        
        /// <summary>
        /// Multiple items can be expanded at once
        /// </summary>
        Multiple
    }
    
    /// <summary>
    /// Accordion item event arguments
    /// </summary>
    public class AccordionItemEventArgs
    {
        /// <summary>
        /// Gets the ID of the item
        /// </summary>
        public string ItemId { get; }
        
        /// <summary>
        /// Gets whether the item is expanded
        /// </summary>
        public bool IsExpanded { get; }
        
        /// <summary>
        /// Creates a new instance of <see cref="AccordionItemEventArgs"/>
        /// </summary>
        /// <param name="itemId">The ID of the item</param>
        /// <param name="isExpanded">Whether the item is expanded</param>
        public AccordionItemEventArgs(string itemId, bool isExpanded)
        {
            ItemId = itemId;
            IsExpanded = isExpanded;
        }
    }
}