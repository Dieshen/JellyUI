@namespace VibeUI.Components
@inherits Base.ThemedComponentBase
@inject IJSRuntime JSRuntime
@using System.Globalization

<div class="@CombinedClass">
    <div class="date-input-wrapper">
        <Input 
            class="date-input"
            type="text"
            Value="@FormattedDate"
            readonly="true"
            placeholder="@Placeholder"
            disabled="@Disabled" 
            @onclick="ToggleCalendar" />
            
        <div class="date-icon" @onclick="ToggleCalendar">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"></rect><line x1="16" x2="16" y1="2" y2="6"></line><line x1="8" x2="8" y1="2" y2="6"></line><line x1="3" x2="21" y1="10" y2="10"></line></svg>
        </div>
    </div>
    
    @if (IsOpen)
    {
        <div class="date-popup">
            <div class="date-header">
                <button type="button" class="date-nav-btn" @onclick="PreviousMonth">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"></path></svg>
                </button>
                <div class="date-header-label">
                    <select class="date-month-select" value="@CurrentMonth" @onchange="HandleMonthChange">
                        @for (int i = 0; i < 12; i++)
                        {
                            <option value="@i">@DateTimeFormatInfo.CurrentInfo.GetMonthName(i + 1)</option>
                        }
                    </select>
                    <select class="date-year-select" value="@CurrentYear" @onchange="HandleYearChange">
                        @for (int i = MinYear; i <= MaxYear; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
                <button type="button" class="date-nav-btn" @onclick="NextMonth">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"></path></svg>
                </button>
            </div>
            
            <div class="date-calendar">
                <div class="date-day-names">
                    @foreach (var day in DayNames)
                    {
                        <div class="date-day-name">@day</div>
                    }
                </div>
                
                <div class="date-grid">
                    @foreach (var week in CalendarDays)
                    {
                        <div class="date-week">
                            @foreach (var day in week)
                            {
                                <button 
                                    type="button"
                                    class="@GetDayClass(day)"
                                    disabled="@(!day.IsCurrentMonth || !IsInRange(day.Date) || Disabled)"
                                    @onclick="() => SelectDate(day.Date)">
                                    @day.DayNumber
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
            
            <div class="date-footer">
                <button type="button" class="date-today-btn" @onclick="SelectToday">Today</button>
            </div>
        </div>
        
        <div class="date-backdrop" @onclick="CloseCalendar"></div>
    }
</div>

@code {
    /// <summary>
    /// Represents a calendar day.
    /// </summary>
    private class CalendarDay
    {
        public DateTime Date { get; set; }
        public int DayNumber { get; set; }
        public bool IsCurrentMonth { get; set; }
        public bool IsToday { get; set; }
    }

    /// <summary>
    /// Gets or sets the selected date.
    /// </summary>
    [Parameter]
    public DateTime? Date { get; set; }

    /// <summary>
    /// Gets or sets the callback when the date changes.
    /// </summary>
    [Parameter]
    public EventCallback<DateTime?> OnChange { get; set; }

    /// <summary>
    /// Gets or sets the date format.
    /// </summary>
    [Parameter]
    public string Format { get; set; } = "MM/dd/yyyy";

    /// <summary>
    /// Gets or sets the placeholder text.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = "Select date";

    /// <summary>
    /// Gets or sets whether the date picker is disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Gets or sets the minimum selectable date.
    /// </summary>
    [Parameter]
    public DateTime? MinDate { get; set; }

    /// <summary>
    /// Gets or sets the maximum selectable date.
    /// </summary>
    [Parameter]
    public DateTime? MaxDate { get; set; }

    /// <summary>
    /// Gets or sets the first day of the week (0 = Sunday, 1 = Monday, etc.).
    /// </summary>
    [Parameter]
    public int FirstDayOfWeek { get; set; } = 0;

    /// <summary>
    /// Gets or sets the minimum year that can be selected.
    /// </summary>
    [Parameter]
    public int MinYear { get; set; } = DateTime.Today.Year - 100;

    /// <summary>
    /// Gets or sets the maximum year that can be selected.
    /// </summary>
    [Parameter]
    public int MaxYear { get; set; } = DateTime.Today.Year + 100;

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-datepicker";

    /// <summary>
    /// Flag to track if the calendar is open.
    /// </summary>
    private bool IsOpen { get; set; }

    /// <summary>
    /// Current month (0-11) displayed in the calendar.
    /// </summary>
    private int CurrentMonth { get; set; }

    /// <summary>
    /// Current year displayed in the calendar.
    /// </summary>
    private int CurrentYear { get; set; }

    /// <summary>
    /// The formatted date for display.
    /// </summary>
    private string FormattedDate => Date.HasValue ? Date.Value.ToString(Format) : string.Empty;

    /// <summary>
    /// The day names to display in the calendar header.
    /// </summary>
    private string[] DayNames => GetDayNames();

    /// <summary>
    /// The calendar days for the current month view.
    /// </summary>
    private List<List<CalendarDay>> CalendarDays => GenerateCalendar(CurrentYear, CurrentMonth);

    /// <summary>
    /// Initialize the component.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        InitializeCalendar();
    }

    /// <summary>
    /// Initialize the calendar view.
    /// </summary>
    private void InitializeCalendar()
    {
        var dateToUse = Date ?? DateTime.Today;
        CurrentMonth = dateToUse.Month - 1;
        CurrentYear = dateToUse.Year;
    }

    /// <summary>
    /// Toggles the calendar visibility.
    /// </summary>
    private void ToggleCalendar()
    {
        if (!Disabled)
        {
            IsOpen = !IsOpen;
        }
    }

    /// <summary>
    /// Closes the calendar.
    /// </summary>
    private void CloseCalendar()
    {
        IsOpen = false;
    }

    /// <summary>
    /// Navigates to the previous month.
    /// </summary>
    private void PreviousMonth()
    {
        CurrentMonth--;
        if (CurrentMonth < 0)
        {
            CurrentMonth = 11;
            CurrentYear--;
        }
    }

    /// <summary>
    /// Navigates to the next month.
    /// </summary>
    private void NextMonth()
    {
        CurrentMonth++;
        if (CurrentMonth > 11)
        {
            CurrentMonth = 0;
            CurrentYear++;
        }
    }

    /// <summary>
    /// Handles month changes from the dropdown.
    /// </summary>
    private void HandleMonthChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int month))
        {
            CurrentMonth = month;
        }
    }

    /// <summary>
    /// Handles year changes from the dropdown.
    /// </summary>
    private void HandleYearChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int year))
        {
            CurrentYear = year;
        }
    }

    /// <summary>
    /// Selects a date.
    /// </summary>
    /// <param name="date">The date to select.</param>
    private async Task SelectDate(DateTime date)
    {
        Date = date;
        await OnChange.InvokeAsync(Date);
        CloseCalendar();
    }

    /// <summary>
    /// Selects today's date.
    /// </summary>
    private async Task SelectToday()
    {
        var today = DateTime.Today;
        if (IsInRange(today))
        {
            Date = today;
            await OnChange.InvokeAsync(Date);
            CloseCalendar();
        }
    }

    /// <summary>
    /// Gets the CSS class for a day in the calendar.
    /// </summary>
    /// <param name="day">The calendar day.</param>
    /// <returns>The CSS class.</returns>
    private string GetDayClass(CalendarDay day)
    {
        var classes = new List<string> { "date-day" };

        if (!day.IsCurrentMonth)
        {
            classes.Add("outside-month");
        }

        if (day.IsToday)
        {
            classes.Add("today");
        }

        if (Date.HasValue && day.Date.Date == Date.Value.Date)
        {
            classes.Add("selected");
        }

        return string.Join(" ", classes);
    }

    /// <summary>
    /// Gets the day names for the calendar header.
    /// </summary>
    /// <returns>An array of day names.</returns>
    private string[] GetDayNames()
    {
        var dayNames = new string[7];
        var culture = CultureInfo.CurrentCulture;
        var daysOfWeek = culture.DateTimeFormat.AbbreviatedDayNames;
        
        for (int i = 0; i < 7; i++)
        {
            var dayIndex = (i + FirstDayOfWeek) % 7;
            dayNames[i] = daysOfWeek[dayIndex];
        }
        
        return dayNames;
    }

    /// <summary>
    /// Generates the calendar days for a specific month.
    /// </summary>
    /// <param name="year">The year.</param>
    /// <param name="month">The month (0-11).</param>
    /// <returns>A list of calendar weeks.</returns>
    private List<List<CalendarDay>> GenerateCalendar(int year, int month)
    {
        var today = DateTime.Today;
        var firstDay = new DateTime(year, month + 1, 1);
        var lastDay = firstDay.AddMonths(1).AddDays(-1);
        
        var calendar = new List<List<CalendarDay>>();
        var currentWeek = new List<CalendarDay>();
        
        // Calculate the first day to display
        int dayOfWeek = (int)firstDay.DayOfWeek;
        int diff = (dayOfWeek - FirstDayOfWeek + 7) % 7;
        var start = firstDay.AddDays(-diff);
        
        // Generate 6 weeks (42 days) to ensure we have enough rows
        for (int i = 0; i < 42; i++)
        {
            var currentDate = start.AddDays(i);
            var isCurrentMonth = currentDate.Month == month + 1 && currentDate.Year == year;
            
            var day = new CalendarDay
            {
                Date = currentDate,
                DayNumber = currentDate.Day,
                IsCurrentMonth = isCurrentMonth,
                IsToday = currentDate.Date == today.Date
            };
            
            currentWeek.Add(day);
            
            // Start a new week after 7 days
            if (currentWeek.Count == 7)
            {
                calendar.Add(currentWeek);
                currentWeek = new List<CalendarDay>();
                
                // If we've added enough days from the next month, we can stop
                if (calendar.Count >= 4 && !isCurrentMonth)
                {
                    break;
                }
            }
        }
        
        return calendar;
    }

    /// <summary>
    /// Checks if a date is within the allowed range.
    /// </summary>
    /// <param name="date">The date to check.</param>
    /// <returns>True if the date is within range.</returns>
    private bool IsInRange(DateTime date)
    {
        if (MinDate.HasValue && date < MinDate.Value)
        {
            return false;
        }
        
        if (MaxDate.HasValue && date > MaxDate.Value)
        {
            return false;
        }
        
        return true;
    }

    /// <summary>
    /// Add a click event listener to close the calendar when clicking outside.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            // In a real implementation, we would add JS interop to handle clicking outside
        }
    }
}