@inherits VibeUI.Base.ThemedComponentBase

<div class="@CombinedClass">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="vibe-select-label" for="@Id">@Label</label>
    }
    
    <div class="vibe-select-wrapper">
        <select id="@Id"
                class="vibe-select-input"
                disabled="@Disabled"
                @attributes="AdditionalAttributes"
                @onchange="OnChangeHandler"
                @onclick:stopPropagation>
            @if (!string.IsNullOrEmpty(Placeholder))
            {
                <option value="" disabled selected>@Placeholder</option>
            }
            
            @ChildContent
        </select>
        <div class="vibe-select-icon"></div>
    </div>
    
    @if (!string.IsNullOrEmpty(HelperText))
    {
        <div class="vibe-select-helper-text">@HelperText</div>
    }
</div>

@code {
    private string _id = Guid.NewGuid().ToString();

    /// <summary>
    /// Gets or sets the select ID
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// Gets or sets the label text
    /// </summary>
    [Parameter]
    public string Label { get; set; }

    /// <summary>
    /// Gets or sets the placeholder text
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; }

    /// <summary>
    /// Gets or sets the helper text
    /// </summary>
    [Parameter]
    public string HelperText { get; set; }

    /// <summary>
    /// Gets or sets whether the select is disabled
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Gets or sets the select options
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the callback for when the value changes
    /// </summary>
    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    /// <inheritdoc/>
    protected override string ComponentClass => "vibe-select";

    /// <summary>
    /// Gets the ID of the select element
    /// </summary>
    private string Id => string.IsNullOrEmpty(this.Id) ? _id : this.Id;

    private async Task OnChangeHandler(ChangeEventArgs args)
    {
        if (OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync(args);
        }
    }
}