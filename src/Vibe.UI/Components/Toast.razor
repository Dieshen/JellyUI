@namespace VibeUI.Components
@inherits Base.ThemedComponentBase
@implements IDisposable

<div class="@CombinedClass @VariantClass @(IsVisible ? "visible" : "")" role="alert" aria-live="assertive">
    <div class="toast-content">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <div class="toast-icon">@Icon</div>
        }
        <div class="toast-message">
            @if (!string.IsNullOrEmpty(Title))
            {
                <div class="toast-title">@Title</div>
            }
            <div class="toast-description">@Description</div>
        </div>
    </div>
    @if (ShowCloseButton)
    {
        <button type="button" class="toast-close" @onclick="Close" aria-label="Close">
            <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path>
            </svg>
        </button>
    }
    @if (ShowProgress && Duration > 0)
    {
        <div class="toast-progress">
            <div class="toast-progress-bar" style="animation-duration: @(Duration)ms;"></div>
        </div>
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the title of the toast.
    /// </summary>
    [Parameter]
    public string Title { get; set; }

    /// <summary>
    /// Gets or sets the description of the toast.
    /// </summary>
    [Parameter]
    public string Description { get; set; }

    /// <summary>
    /// Gets or sets the icon for the toast.
    /// </summary>
    [Parameter]
    public string Icon { get; set; }

    /// <summary>
    /// Gets or sets the variant of the toast.
    /// </summary>
    [Parameter]
    public string Variant { get; set; } = "default";

    /// <summary>
    /// Gets or sets the duration in milliseconds before the toast disappears.
    /// </summary>
    [Parameter]
    public int Duration { get; set; } = 5000;

    /// <summary>
    /// Gets or sets whether to show the close button.
    /// </summary>
    [Parameter]
    public bool ShowCloseButton { get; set; } = true;

    /// <summary>
    /// Gets or sets whether to show the progress bar.
    /// </summary>
    [Parameter]
    public bool ShowProgress { get; set; } = true;

    /// <summary>
    /// Gets or sets the callback when the toast is closed.
    /// </summary>
    [Parameter]
    public EventCallback OnClose { get; set; }

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-toast";

    /// <summary>
    /// Gets the CSS class for the variant.
    /// </summary>
    private string VariantClass => $"toast-{Variant}";

    /// <summary>
    /// Flag to track if the toast is visible.
    /// </summary>
    private bool IsVisible { get; set; } = true;

    /// <summary>
    /// Timer for auto-dismissing the toast.
    /// </summary>
    private System.Timers.Timer _dismissTimer;

    /// <summary>
    /// Initializes the component.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Duration > 0)
        {
            _dismissTimer = new System.Timers.Timer(Duration);
            _dismissTimer.Elapsed += (sender, e) => Close();
            _dismissTimer.AutoReset = false;
            _dismissTimer.Start();
        }
    }

    /// <summary>
    /// Closes the toast.
    /// </summary>
    private async Task Close()
    {
        IsVisible = false;
        StateHasChanged();
        await OnClose.InvokeAsync();
    }

    /// <summary>
    /// Disposes the component.
    /// </summary>
    public void Dispose()
    {
        _dismissTimer?.Dispose();
    }
}