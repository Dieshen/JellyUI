@namespace VibeUI.Components
@inherits Base.ThemedComponentBase

<div class="@CombinedClass @(Disabled ? "disabled" : "")" @onclick="OnClick">
    @if (!string.IsNullOrEmpty(Icon))
    {
        <span class="context-item-icon">@((MarkupString)Icon)</span>
    }
    <span class="context-item-content">@ChildContent</span>
    @if (!string.IsNullOrEmpty(Shortcut))
    {
        <span class="context-item-shortcut">@Shortcut</span>
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the content of the context menu item.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the icon (HTML) for the context menu item.
    /// </summary>
    [Parameter]
    public string Icon { get; set; }

    /// <summary>
    /// Gets or sets the keyboard shortcut text.
    /// </summary>
    [Parameter]
    public string Shortcut { get; set; }

    /// <summary>
    /// Gets or sets whether the context menu item is disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Gets or sets the callback when the context menu item is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnItemClick { get; set; }

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-context-menu-item";

    /// <summary>
    /// Handles the click event.
    /// </summary>
    /// <param name="e">The mouse event args.</param>
    private async Task OnClick(MouseEventArgs e)
    {
        if (!Disabled)
        {
            await OnItemClick.InvokeAsync(e);
        }
    }
}