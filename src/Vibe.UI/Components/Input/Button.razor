@inherits Vibe.UI.Base.ThemedComponentBase

@if (Href != null)
{
    <a href="@Href"
       class="@CombinedClass"
       target="@Target"
       rel="@RelAttribute"
       disabled="@(Disabled ? "disabled" : null)"
       @attributes="AdditionalAttributes"
       @onclick="OnClickHandler">
        @if (Loading)
        {
            <span class="vibe-button-spinner"></span>
        }
        @if (Icon != null)
        {
            <span class="vibe-button-icon">@Icon</span>
        }
        @if (ChildContent != null)
        {
            <span class="vibe-button-content">@ChildContent</span>
        }
    </a>
}
else
{
    <button type="@Type"
            class="@CombinedClass"
            disabled="@Disabled"
            @attributes="AdditionalAttributes"
            @onclick="OnClickHandler">
        @if (Loading)
        {
            <span class="vibe-button-spinner"></span>
        }
        @if (Icon != null)
        {
            <span class="vibe-button-icon">@Icon</span>
        }
        @if (ChildContent != null)
        {
            <span class="vibe-button-content">@ChildContent</span>
        }
    </button>
}

@code {
    /// <summary>
    /// Gets or sets the button content
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the button icon
    /// </summary>
    [Parameter]
    public RenderFragment Icon { get; set; }

    /// <summary>
    /// Gets or sets the button variant
    /// </summary>
    [Parameter]
    public ButtonVariant Variant { get; set; } = ButtonVariant.Primary;

    /// <summary>
    /// Gets or sets the button size
    /// </summary>
    [Parameter]
    public ButtonSize Size { get; set; } = ButtonSize.Medium;

    /// <summary>
    /// Gets or sets whether the button is full width
    /// </summary>
    [Parameter]
    public bool FullWidth { get; set; }

    /// <summary>
    /// Gets or sets whether the button is disabled
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Gets or sets whether the button is in a loading state
    /// </summary>
    [Parameter]
    public bool Loading { get; set; }

    /// <summary>
    /// Gets or sets the button type (submit, reset, button)
    /// </summary>
    [Parameter]
    public string Type { get; set; } = "button";

    /// <summary>
    /// Gets or sets the URL to navigate to when the button is clicked
    /// When provided, the button is rendered as an anchor tag
    /// </summary>
    [Parameter]
    public string Href { get; set; }

    /// <summary>
    /// Gets or sets the target attribute for the anchor tag
    /// Only applicable when Href is provided
    /// </summary>
    [Parameter]
    public string Target { get; set; }

    /// <summary>
    /// Gets or sets the rel attribute for the anchor tag
    /// Only applicable when Href is provided
    /// </summary>
    [Parameter]
    public string Rel { get; set; }

    /// <summary>
    /// Gets or sets the callback for when the button is clicked
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    /// <inheritdoc/>
    protected override string ComponentClass => GenerateClasses();

    /// <summary>
    /// Gets the rel attribute value
    /// </summary>
    private string RelAttribute => string.IsNullOrEmpty(Target) ? Rel : "noopener noreferrer";

    private string GenerateClasses()
    {
        var classes = new List<string>
        {
            "vibe-button",
            $"vibe-button-{Variant.ToString().ToLowerInvariant()}",
            $"vibe-button-{Size.ToString().ToLowerInvariant()}"
        };

        if (FullWidth)
        {
            classes.Add("vibe-button-full-width");
        }

        if (Loading)
        {
            classes.Add("vibe-button-loading");
        }

        if (Icon != null && ChildContent == null)
        {
            classes.Add("vibe-button-icon-only");
        }

        return string.Join(" ", classes);
    }

    private async Task OnClickHandler(MouseEventArgs args)
    {
        if (!Disabled && !Loading && OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(args);
        }
    }

    /// <summary>
    /// Button variant options
    /// </summary>
    public enum ButtonVariant
    {
        /// <summary>
        /// Primary button style
        /// </summary>
        Primary,

        /// <summary>
        /// Secondary button style
        /// </summary>
        Secondary,

        /// <summary>
        /// Destructive button style
        /// </summary>
        Destructive,

        /// <summary>
        /// Outline button style
        /// </summary>
        Outline,

        /// <summary>
        /// Ghost button style
        /// </summary>
        Ghost,

        /// <summary>
        /// Link button style
        /// </summary>
        Link
    }

    /// <summary>
    /// Button size options
    /// </summary>
    public enum ButtonSize
    {
        /// <summary>
        /// Small button size
        /// </summary>
        Small,

        /// <summary>
        /// Medium button size (default)
        /// </summary>
        Medium,

        /// <summary>
        /// Large button size
        /// </summary>
        Large
    }
}