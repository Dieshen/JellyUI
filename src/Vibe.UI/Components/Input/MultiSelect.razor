@namespace Vibe.UI.Components
@typeparam TItem
@inherits Base.ThemedComponentBase

<div class="@CombinedClass">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="multiselect-label" for="@Id">@Label</label>
    }
    
    <div class="multiselect-container" @onclick="ToggleDropdown">
        <div class="multiselect-values">
            @if (SelectedItems.Any())
            {
                @foreach (var item in SelectedItems)
                {
                    <div class="multiselect-tag">
                        <span class="multiselect-tag-label">@(ItemTemplate != null ? ItemTemplate(item) : item.ToString())</span>
                        <button type="button" class="multiselect-tag-remove" @onclick="(e) => RemoveItem(e, item)">
                            <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M9.42426 2.57574C9.65858 2.34142 9.65858 1.96142 9.42426 1.72709C9.18995 1.49277 8.80995 1.49277 8.57563 1.72709L5 5.30272L1.42437 1.72709C1.19005 1.49277 0.810048 1.49277 0.575736 1.72709C0.341423 1.96142 0.341423 2.34142 0.575736 2.57574L4.15137 6.15137L0.575736 9.72699C0.341423 9.96131 0.341423 10.3413 0.575736 10.5756C0.810048 10.81 1.19005 10.81 1.42437 10.5756L5 7L8.57563 10.5756C8.80995 10.81 9.18995 10.81 9.42426 10.5756C9.65858 10.3413 9.65858 9.96131 9.42426 9.72699L5.84863 6.15137L9.42426 2.57574Z" fill="currentColor"/>
                            </svg>
                        </button>
                    </div>
                }
            }
            else if (string.IsNullOrEmpty(SearchText) && !string.IsNullOrEmpty(Placeholder))
            {
                <div class="multiselect-placeholder">@Placeholder</div>
            }
            
            <input 
                id="@Id" 
                type="text" 
                class="multiselect-input" 
                @bind-value="SearchText" 
                @bind-value:event="oninput"
                @onfocus="() => IsOpen = true" 
                @onkeydown="OnKeyDown"
                placeholder="@(SelectedItems.Any() ? "" : Placeholder)"
                disabled="@Disabled" />
        </div>
        
        <div class="multiselect-indicators">
            @if (!string.IsNullOrEmpty(SearchText) && AllowClear)
            {
                <button type="button" class="multiselect-clear" @onclick="ClearSearch">
                    <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9.42426 2.57574C9.65858 2.34142 9.65858 1.96142 9.42426 1.72709C9.18995 1.49277 8.80995 1.49277 8.57563 1.72709L5 5.30272L1.42437 1.72709C1.19005 1.49277 0.810048 1.49277 0.575736 1.72709C0.341423 1.96142 0.341423 2.34142 0.575736 2.57574L4.15137 6.15137L0.575736 9.72699C0.341423 9.96131 0.341423 10.3413 0.575736 10.5756C0.810048 10.81 1.19005 10.81 1.42437 10.5756L5 7L8.57563 10.5756C8.80995 10.81 9.18995 10.81 9.42426 10.5756C9.65858 10.3413 9.65858 9.96131 9.42426 9.72699L5.84863 6.15137L9.42426 2.57574Z" fill="currentColor"/>
                    </svg>
                </button>
            }
            
            <div class="multiselect-chevron">
                <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.25 4.5L6 8.25L9.75 4.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
        </div>
    </div>
    
    @if (IsOpen)
    {
        <div class="multiselect-dropdown">
            @if (FilteredItems.Any())
            {
                <div class="multiselect-options">
                    @foreach (var item in FilteredItems)
                    {
                        bool isSelected = IsItemSelected(item);
                        <div 
                            class="multiselect-option @(isSelected ? "selected" : "") @(HighlightedIndex == FilteredItems.IndexOf(item) ? "highlighted" : "")"
                            @onclick="() => ToggleItem(item)"
                            @onmouseover="() => HighlightedIndex = FilteredItems.IndexOf(item)">
                            
                            <div class="multiselect-checkbox">
                                @if (isSelected)
                                {
                                    <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M10.5 3L4.5 9L1.5 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                    </svg>
                                }
                            </div>
                            
                            <div class="multiselect-option-content">
                                @(ItemTemplate != null ? ItemTemplate(item) : item.ToString())
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="multiselect-no-options">No options available</div>
            }
        </div>
        
        <div class="multiselect-backdrop" @onclick="CloseDropdown"></div>
    }
    
    @if (!string.IsNullOrEmpty(HelperText))
    {
        <div class="multiselect-helper-text">@HelperText</div>
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the collection of items to choose from.
    /// </summary>
    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();
    
    /// <summary>
    /// Gets or sets the template to display each item.
    /// </summary>
    [Parameter]
    public Func<TItem, string> ItemTemplate { get; set; }
    
    /// <summary>
    /// Gets or sets the collection of selected items.
    /// </summary>
    [Parameter]
    public List<TItem> SelectedItems { get; set; } = new List<TItem>();
    
    /// <summary>
    /// Gets or sets the callback when selected items change.
    /// </summary>
    [Parameter]
    public EventCallback<List<TItem>> SelectedItemsChanged { get; set; }
    
    /// <summary>
    /// Gets or sets the maximum number of items that can be selected.
    /// </summary>
    [Parameter]
    public int? MaxSelectedItems { get; set; }
    
    /// <summary>
    /// Gets or sets the label for the multiselect.
    /// </summary>
    [Parameter]
    public string Label { get; set; }
    
    /// <summary>
    /// Gets or sets the placeholder text when no items are selected.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = "Select items...";
    
    /// <summary>
    /// Gets or sets the helper text displayed below the control.
    /// </summary>
    [Parameter]
    public string HelperText { get; set; }
    
    /// <summary>
    /// Gets or sets a value indicating whether the control is disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }
    
    /// <summary>
    /// Gets or sets a value indicating whether to allow clearing the search.
    /// </summary>
    [Parameter]
    public bool AllowClear { get; set; } = true;
    
    /// <summary>
    /// Gets or sets a value indicating whether to filter items as the user types.
    /// </summary>
    [Parameter]
    public bool EnableFiltering { get; set; } = true;
    
    /// <summary>
    /// Gets or sets a function to filter items based on search text.
    /// </summary>
    [Parameter]
    public Func<TItem, string, bool> FilterFunc { get; set; }
    
    /// <summary>
    /// Gets or sets the function to compare items for equality.
    /// </summary>
    [Parameter]
    public Func<TItem, TItem, bool> CompareItems { get; set; }
    
    /// <summary>
    /// Gets or sets a unique identifier for the control.
    /// </summary>
    [Parameter]
    public string Id { get; set; } = $"multiselect-{Guid.NewGuid()}";
    
    /// <summary>
    /// Gets or sets the currently highlighted item index.
    /// </summary>
    private int HighlightedIndex { get; set; } = -1;
    
    /// <summary>
    /// Gets or sets the search text for filtering.
    /// </summary>
    private string SearchText { get; set; } = string.Empty;
    
    /// <summary>
    /// Gets or sets a value indicating whether the dropdown is open.
    /// </summary>
    private bool IsOpen { get; set; }
    
    /// <summary>
    /// Gets the component CSS class.
    /// </summary>
    protected override string ComponentClass => "vibe-multiselect";
    
    /// <summary>
    /// Gets the filtered list of items based on the search text.
    /// </summary>
    private IList<TItem> FilteredItems
    {
        get
        {
            if (!EnableFiltering || string.IsNullOrEmpty(SearchText))
                return Items.ToList();
                
            if (FilterFunc != null)
                return Items.Where(item => FilterFunc(item, SearchText)).ToList();
                
            return Items
                .Where(item => 
                    item?.ToString()?.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ?? false)
                .ToList();
        }
    }
    
    /// <summary>
    /// Toggles the dropdown open/closed state.
    /// </summary>
    private void ToggleDropdown()
    {
        if (Disabled)
            return;
            
        IsOpen = !IsOpen;
        if (IsOpen)
            HighlightedIndex = -1;
    }
    
    /// <summary>
    /// Closes the dropdown.
    /// </summary>
    private void CloseDropdown()
    {
        IsOpen = false;
    }
    
    /// <summary>
    /// Clears the search text.
    /// </summary>
    private void ClearSearch(MouseEventArgs args)
    {
        SearchText = string.Empty;
        args.StopPropagation();
    }
    
    /// <summary>
    /// Checks if an item is currently selected.
    /// </summary>
    /// <param name="item">The item to check.</param>
    /// <returns>True if the item is selected; otherwise, false.</returns>
    private bool IsItemSelected(TItem item)
    {
        return CompareItems != null 
            ? SelectedItems.Any(selectedItem => CompareItems(selectedItem, item))
            : SelectedItems.Contains(item);
    }
    
    /// <summary>
    /// Toggles selection of an item.
    /// </summary>
    /// <param name="item">The item to toggle.</param>
    private async Task ToggleItem(TItem item)
    {
        if (Disabled)
            return;
            
        bool isSelected = IsItemSelected(item);
        
        if (isSelected)
        {
            // Remove item from selection
            if (CompareItems != null)
            {
                var itemToRemove = SelectedItems.FirstOrDefault(selectedItem => CompareItems(selectedItem, item));
                if (itemToRemove != null)
                    SelectedItems.Remove(itemToRemove);
            }
            else
            {
                SelectedItems.Remove(item);
            }
        }
        else
        {
            // Check if max selection limit is reached
            if (MaxSelectedItems.HasValue && SelectedItems.Count >= MaxSelectedItems.Value)
                return;
                
            // Add item to selection
            SelectedItems.Add(item);
        }
        
        await SelectedItemsChanged.InvokeAsync(SelectedItems);
    }
    
    /// <summary>
    /// Removes an item from the selection.
    /// </summary>
    /// <param name="e">The mouse event args.</param>
    /// <param name="item">The item to remove.</param>
    private async Task RemoveItem(MouseEventArgs e, TItem item)
    {
        if (Disabled)
            return;
            
        e.StopPropagation();
        
        if (CompareItems != null)
        {
            var itemToRemove = SelectedItems.FirstOrDefault(selectedItem => CompareItems(selectedItem, item));
            if (itemToRemove != null)
                SelectedItems.Remove(itemToRemove);
        }
        else
        {
            SelectedItems.Remove(item);
        }
        
        await SelectedItemsChanged.InvokeAsync(SelectedItems);
    }
    
    /// <summary>
    /// Handles keyboard navigation in the dropdown.
    /// </summary>
    /// <param name="e">The keyboard event args.</param>
    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (Disabled)
            return;
            
        switch (e.Key)
        {
            case "Escape":
                CloseDropdown();
                break;
                
            case "Enter":
                if (IsOpen && HighlightedIndex >= 0 && HighlightedIndex < FilteredItems.Count)
                {
                    await ToggleItem(FilteredItems[HighlightedIndex]);
                }
                else if (!IsOpen)
                {
                    IsOpen = true;
                }
                break;
                
            case "ArrowDown":
                if (!IsOpen)
                {
                    IsOpen = true;
                }
                else if (FilteredItems.Any())
                {
                    HighlightedIndex = (HighlightedIndex + 1) % FilteredItems.Count;
                }
                break;
                
            case "ArrowUp":
                if (IsOpen && FilteredItems.Any())
                {
                    HighlightedIndex = (HighlightedIndex - 1 + FilteredItems.Count) % FilteredItems.Count;
                }
                break;
        }
    }
}