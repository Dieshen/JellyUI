@inherits Vibe.UI.Base.ThemedComponentBase
@inject IJSRuntime JSRuntime

<div class="@CombinedClass" @attributes="AdditionalAttributes">
    <div class="vibe-slider-track">
        <div class="vibe-slider-range" style="width: @GetPercentage()%"></div>
    </div>
    <input
        type="range"
        class="vibe-slider-thumb"
        min="@Min"
        max="@Max"
        step="@Step"
        value="@Value"
        disabled="@Disabled"
        @oninput="OnInput"
        @onchange="OnChange" />
    
    @if (ShowValue)
    {
        <div class="vibe-slider-value">@Value</div>
    }
</div>

@code {
    private string _id = Guid.NewGuid().ToString();

    /// <summary>
    /// Gets or sets the ID of the slider
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// Gets or sets the label text
    /// </summary>
    [Parameter]
    public string Label { get; set; }

    /// <summary>
    /// Gets or sets the minimum value of the slider
    /// </summary>
    [Parameter]
    public double Min { get; set; } = 0;

    /// <summary>
    /// Gets or sets the maximum value of the slider
    /// </summary>
    [Parameter]
    public double Max { get; set; } = 100;

    /// <summary>
    /// Gets or sets the step value of the slider
    /// </summary>
    [Parameter]
    public double Step { get; set; } = 1;

    /// <summary>
    /// Gets or sets the current value of the slider
    /// </summary>
    [Parameter]
    public double Value { get; set; } = 0;

    /// <summary>
    /// Gets or sets whether the slider is disabled
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Gets or sets whether to show the current value
    /// </summary>
    [Parameter]
    public bool ShowValue { get; set; } = true;

    /// <summary>
    /// Gets or sets the format string for the displayed value
    /// </summary>
    [Parameter]
    public string ValueFormat { get; set; } = "0.##";

    /// <summary>
    /// Gets or sets the callback for when the slider value changes
    /// </summary>
    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    /// <summary>
    /// Gets or sets the callback for when the input event occurs
    /// </summary>
    [Parameter]
    public EventCallback<ChangeEventArgs> OnInput { get; set; }

    /// <summary>
    /// Gets or sets the callback for when the change event occurs
    /// </summary>
    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }

    /// <inheritdoc/>
    protected override string ComponentClass => $"vibe-slider {(Disabled ? "vibe-slider-disabled" : "")}";

    /// <summary>
    /// Gets the ID of the slider element
    /// </summary>
    private string Id => string.IsNullOrEmpty(this.Id) ? _id : this.Id;

    private async Task OnChangeHandler(ChangeEventArgs args)
    {
        if (OnChange.HasDelegate)
        {
            await OnChange.InvokeAsync(args);
        }

        if (args.Value is string valueStr && 
            double.TryParse(valueStr, NumberStyles.Any, CultureInfo.InvariantCulture, out var value))
        {
            Value = value;
            
            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(value);
            }
        }
    }

    private async Task OnInputHandler(ChangeEventArgs args)
    {
        if (OnInput.HasDelegate)
        {
            await OnInput.InvokeAsync(args);
        }

        if (args.Value is string valueStr && 
            double.TryParse(valueStr, NumberStyles.Any, CultureInfo.InvariantCulture, out var value))
        {
            Value = value;
            
            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(value);
            }
        }
    }

    private string GetTrackFillWidth()
    {
        var percentage = ((Value - Min) / (Max - Min)) * 100;
        percentage = Math.Clamp(percentage, 0, 100);
        return $"{percentage}%";
    }

    private string GetThumbPosition()
    {
        var percentage = ((Value - Min) / (Max - Min)) * 100;
        percentage = Math.Clamp(percentage, 0, 100);
        return $"calc({percentage}% - 0.5rem)";
    }

    /// <summary>
    /// Gets the percentage of the slider from the min/max range
    /// </summary>
    private string GetPercentage()
    {
        if (Min >= Max) return "0";
        
        double percentage = ((Value - Min) / (Max - Min)) * 100;
        return Math.Clamp(percentage, 0, 100).ToString(System.Globalization.CultureInfo.InvariantCulture);
    }

    /// <summary>
    /// Handles the slider input event (during drag)
    /// </summary>
    private async Task OnInput(ChangeEventArgs e)
    {
        if (e.Value != null && double.TryParse(e.Value.ToString(), out double newValue))
        {
            Value = Math.Clamp(newValue, Min, Max);
        }
    }

    /// <summary>
    /// Handles the slider change event (after drag completes)
    /// </summary>
    private async Task OnChange(ChangeEventArgs e)
    {
        if (e.Value != null && double.TryParse(e.Value.ToString(), out double newValue))
        {
            Value = Math.Clamp(newValue, Min, Max);
            
            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(Value);
            }
        }
    }
}