@inherits Vibe.UI.Base.ThemedComponentBase

<label class="@CombinedClass" @attributes="AdditionalAttributes">
    <input type="radio"
           class="vibe-radio-input"
           name="@Name"
           value="@Value"
           checked="@Checked"
           disabled="@Disabled"
           @onchange="OnRadioChange" />
    <span class="vibe-radio-control"></span>
    @if (ChildContent != null)
    {
        <span class="vibe-radio-label">
            @ChildContent
        </span>
    }
</label>

@code {
    /// <summary>
    /// Gets or sets the label content
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the value of the radio button
    /// </summary>
    [Parameter]
    public string Value { get; set; }
    
    /// <summary>
    /// Gets or sets the name of the radio group
    /// </summary>
    [Parameter]
    public string Name { get; set; }
    
    /// <summary>
    /// Gets or sets whether the radio button is checked
    /// </summary>
    [Parameter]
    public bool Checked { get; set; }

    /// <summary>
    /// Gets or sets the callback for when the radio state changes
    /// </summary>
    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    /// <summary>
    /// Gets or sets whether the radio is disabled
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <inheritdoc/>
    protected override string ComponentClass => $"vibe-radio {(Disabled ? "vibe-radio-disabled" : "")}";

    /// <summary>
    /// Handles the radio change event
    /// </summary>
    /// <param name="e">The radio change event</param>
    private async Task OnRadioChange(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            Checked = true;

            if (CheckedChanged.HasDelegate)
            {
                await CheckedChanged.InvokeAsync(true);
            }
        }
    }
}