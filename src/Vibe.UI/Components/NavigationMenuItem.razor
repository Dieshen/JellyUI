@namespace VibeUI.Components
@inherits Base.ThemedComponentBase
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="@CombinedClass" 
     id="@Id"
     @onmouseenter="HandleMouseEnter" 
     @onmouseleave="HandleMouseLeave"
     @ref="_elementReference">
    <button type="button" 
            class="navigation-menu-item-trigger"
            disabled="@Disabled"
            @onclick="HandleClick">
        @TriggerContent
    </button>
    
    @if (Content != null && IsActive)
    {
        <div class="navigation-menu-item-content">
            @Content
        </div>
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the ID of the menu item.
    /// </summary>
    [Parameter]
    public string Id { get; set; } = Guid.NewGuid().ToString();
    
    /// <summary>
    /// Gets or sets the content of the trigger button.
    /// </summary>
    [Parameter]
    public RenderFragment TriggerContent { get; set; }
    
    /// <summary>
    /// Gets or sets the content to display when the item is active.
    /// </summary>
    [Parameter]
    public RenderFragment Content { get; set; }
    
    /// <summary>
    /// Gets or sets whether the menu item is disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }
    
    /// <summary>
    /// Gets or sets the callback when the menu item is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    
    /// <summary>
    /// Gets or sets whether viewport content should be shown when this item is active.
    /// </summary>
    [Parameter]
    public bool UseViewport { get; set; }
    
    /// <summary>
    /// Gets or sets the parent navigation menu.
    /// </summary>
    [CascadingParameter]
    public NavigationMenu ParentMenu { get; set; }
    
    /// <summary>
    /// Gets whether the menu item is active.
    /// </summary>
    private bool IsActive { get; set; }
    
    /// <summary>
    /// Reference to the menu item element.
    /// </summary>
    private ElementReference _elementReference;
    
    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-navigation-menu-item";

    /// <summary>
    /// Initializes the component.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        if (string.IsNullOrEmpty(Id))
        {
            Id = Guid.NewGuid().ToString();
        }
    }
    
    /// <summary>
    /// Updates the menu item position after rendering.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            await UpdatePosition();
        }
    }
    
    /// <summary>
    /// Updates the menu item position.
    /// </summary>
    private async Task UpdatePosition()
    {
        try
        {
            var boundingRect = await JSRuntime.InvokeAsync<DOMRect>("eval", $"document.getElementById('{Id}').getBoundingClientRect()");
            
            // Calculate the position relative to the parent
            var parentRect = await JSRuntime.InvokeAsync<DOMRect>("eval", $"document.getElementById('{Id}').parentElement.getBoundingClientRect()");
            var leftPosition = boundingRect.Left - parentRect.Left;
            
            ParentMenu?.RegisterItem(Id, leftPosition, boundingRect.Width);
        }
        catch
        {
            // Ignore errors when updating position
        }
    }
    
    /// <summary>
    /// Handles mouse enter events.
    /// </summary>
    private void HandleMouseEnter()
    {
        if (!Disabled)
        {
            IsActive = true;
            
            if (UseViewport && Content != null)
            {
                ParentMenu.ActivateItem(Id);
            }
            
            StateHasChanged();
        }
    }
    
    /// <summary>
    /// Handles mouse leave events.
    /// </summary>
    private void HandleMouseLeave()
    {
        if (!Disabled)
        {
            IsActive = false;
            
            if (UseViewport && Content != null)
            {
                ParentMenu.DeactivateItem();
            }
            
            StateHasChanged();
        }
    }
    
    /// <summary>
    /// Handles click events.
    /// </summary>
    private async Task HandleClick(MouseEventArgs args)
    {
        if (!Disabled)
        {
            await OnClick.InvokeAsync(args);
        }
    }
    
    /// <summary>
    /// Disposes the component.
    /// </summary>
    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
    
    /// <summary>
    /// DOM rectangle structure for JS interop.
    /// </summary>
    private class DOMRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }
}