@namespace Vibe.UI.Components
@inherits Base.ThemedComponentBase
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="@CombinedClass"
     style="@(Direction == ResizableDirection.Horizontal ? $"width: {Width}px;" : $"height: {Height}px;")">
    <div class="resizable-panel">
        @ChildContent
    </div>
    
    <div class="resizable-handle @HandleDirectionClass"
         @onmousedown="HandleDragStart"
         @ref="_handleReference">
        <div class="resizable-handle-bar"></div>
    </div>
</div>

@code {
    /// <summary>
    /// The direction in which the element can be resized.
    /// </summary>
    public enum ResizableDirection
    {
        /// <summary>
        /// Resize horizontally (left/right).
        /// </summary>
        Horizontal,
        
        /// <summary>
        /// Resize vertically (up/down).
        /// </summary>
        Vertical
    }
    
    /// <summary>
    /// Gets or sets the content of the resizable panel.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    /// <summary>
    /// Gets or sets the direction in which the element can be resized.
    /// </summary>
    [Parameter]
    public ResizableDirection Direction { get; set; } = ResizableDirection.Horizontal;
    
    /// <summary>
    /// Gets or sets the default width (for horizontal resizing).
    /// </summary>
    [Parameter]
    public double DefaultWidth { get; set; } = 300;
    
    /// <summary>
    /// Gets or sets the minimum width (for horizontal resizing).
    /// </summary>
    [Parameter]
    public double MinWidth { get; set; } = 100;
    
    /// <summary>
    /// Gets or sets the maximum width (for horizontal resizing).
    /// </summary>
    [Parameter]
    public double MaxWidth { get; set; } = double.MaxValue;
    
    /// <summary>
    /// Gets or sets the default height (for vertical resizing).
    /// </summary>
    [Parameter]
    public double DefaultHeight { get; set; } = 200;
    
    /// <summary>
    /// Gets or sets the minimum height (for vertical resizing).
    /// </summary>
    [Parameter]
    public double MinHeight { get; set; } = 50;
    
    /// <summary>
    /// Gets or sets the maximum height (for vertical resizing).
    /// </summary>
    [Parameter]
    public double MaxHeight { get; set; } = double.MaxValue;
    
    /// <summary>
    /// Callback invoked when the size changes.
    /// </summary>
    [Parameter]
    public EventCallback<double> OnSizeChange { get; set; }
    
    /// <summary>
    /// Gets the current width (for horizontal resizing).
    /// </summary>
    private double Width { get; set; }
    
    /// <summary>
    /// Gets the current height (for vertical resizing).
    /// </summary>
    private double Height { get; set; }
    
    /// <summary>
    /// Reference to the handle element.
    /// </summary>
    private ElementReference _handleReference;
    
    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-resizable";
    
    /// <summary>
    /// Gets the handle CSS class based on direction.
    /// </summary>
    private string HandleDirectionClass => Direction == ResizableDirection.Horizontal 
        ? "resizable-handle-horizontal" 
        : "resizable-handle-vertical";
    
    /// <summary>
    /// DotNet reference for JavaScript interop.
    /// </summary>
    private DotNetObjectReference<Resizable> _dotNetRef;
    
    /// <summary>
    /// JavaScript module for handling drag functionality.
    /// </summary>
    private IJSObjectReference _dragModule;
    
    /// <summary>
    /// JavaScript object reference for cleanup.
    /// </summary>
    private IJSObjectReference _dragRef;
    
    /// <summary>
    /// Initializes the component.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Width = DefaultWidth;
        Height = DefaultHeight;
    }
    
    /// <summary>
    /// Sets up JavaScript interop after rendering.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            try
            {
                _dragModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/resizable-drag.js");
            }
            catch
            {
                // If the module doesn't exist, we'll create simplified drag behavior
                // using mouse move events directly in the component
                await SetupBasicDragHandlingAsync();
            }
        }
    }
    
    /// <summary>
    /// Sets up basic drag handling if no JS module is available.
    /// </summary>
    private async Task SetupBasicDragHandlingAsync()
    {
        // This is a simplified approach when no external JS is available
        await JSRuntime.InvokeVoidAsync("eval", @"
            window.setupResizableDrag = function(dotNetRef) {
                const handleMouseMove = (e) => {
                    dotNetRef.invokeMethodAsync('HandleDragMove', e.clientX, e.clientY);
                };
                
                const handleMouseUp = () => {
                    document.removeEventListener('mousemove', handleMouseMove);
                    document.removeEventListener('mouseup', handleMouseUp);
                    dotNetRef.invokeMethodAsync('HandleDragEnd');
                };
                
                return {
                    startDrag: function() {
                        document.addEventListener('mousemove', handleMouseMove);
                        document.addEventListener('mouseup', handleMouseUp);
                    },
                    dispose: function() {
                        document.removeEventListener('mousemove', handleMouseMove);
                        document.removeEventListener('mouseup', handleMouseUp);
                    }
                };
            }
        ");
        
        _dragRef = await JSRuntime.InvokeAsync<IJSObjectReference>("setupResizableDrag", _dotNetRef);
    }
    
    /// <summary>
    /// Handles the start of drag operations.
    /// </summary>
    private async Task HandleDragStart()
    {
        if (_dragModule != null)
        {
            await _dragModule.InvokeVoidAsync("startDrag", _handleReference, _dotNetRef, 
                Direction == ResizableDirection.Horizontal);
        }
        else if (_dragRef != null)
        {
            await _dragRef.InvokeVoidAsync("startDrag");
        }
    }
    
    /// <summary>
    /// Callback from JavaScript when dragging moves.
    /// </summary>
    [JSInvokable]
    public void HandleDragMove(double clientX, double clientY)
    {
        if (Direction == ResizableDirection.Horizontal)
        {
            Width = Math.Clamp(clientX, MinWidth, MaxWidth);
        }
        else
        {
            Height = Math.Clamp(clientY, MinHeight, MaxHeight);
        }
        
        StateHasChanged();
    }
    
    /// <summary>
    /// Callback from JavaScript when drag ends.
    /// </summary>
    [JSInvokable]
    public async Task HandleDragEnd()
    {
        if (Direction == ResizableDirection.Horizontal)
        {
            await OnSizeChange.InvokeAsync(Width);
        }
        else
        {
            await OnSizeChange.InvokeAsync(Height);
        }
    }
    
    /// <summary>
    /// Disposes the component and cleans up resources.
    /// </summary>
    public async ValueTask DisposeAsync()
    {
        if (_dragModule != null)
        {
            try
            {
                await _dragModule.DisposeAsync();
            }
            catch
            {
                // Ignore disposal errors
            }
        }
        
        if (_dragRef != null)
        {
            try
            {
                await _dragRef.InvokeVoidAsync("dispose");
                await _dragRef.DisposeAsync();
            }
            catch
            {
                // Ignore disposal errors
            }
        }
        
        _dotNetRef?.Dispose();
    }
}