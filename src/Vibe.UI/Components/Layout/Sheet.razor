@namespace Vibe.UI.Components
@inherits Base.ThemedComponentBase

@if (IsOpen || IsClosing)
{
    <div class="@CombinedClass @(IsClosing ? "closing" : "") @SideClass">
        <div class="sheet-overlay" @onclick="OnOverlayClick"></div>
        <div class="sheet-content" style="@ContentStyle">
            @if (ShowCloseButton)
            {
                <button type="button" class="sheet-close" @onclick="Close" aria-label="Close">
                    <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.8071 2.99385 3.44303 2.99385 3.21848 3.2184C2.99394 3.44295 2.99394 3.80702 3.21848 4.03157L6.6869 7.49999L3.21848 10.9684C2.99394 11.193 2.99394 11.557 3.21848 11.7816C3.44303 12.0061 3.8071 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31321 7.49999L11.7816 4.03157Z" fill="currentColor" />
                    </svg>
                </button>
            }
            
            <div class="sheet-header">
                @if (!string.IsNullOrEmpty(Title))
                {
                    <h3 class="sheet-title">@Title</h3>
                }
                @if (!string.IsNullOrEmpty(Description))
                {
                    <p class="sheet-description">@Description</p>
                }
            </div>
            
            <div class="sheet-body">
                @ChildContent
            </div>

            @if (Footer != null)
            {
                <div class="sheet-footer">
                    @Footer
                </div>
            }
        </div>
    </div>
}

@code {
    /// <summary>
    /// Gets or sets the content of the sheet.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the title of the sheet.
    /// </summary>
    [Parameter]
    public string Title { get; set; }

    /// <summary>
    /// Gets or sets the description of the sheet.
    /// </summary>
    [Parameter]
    public string Description { get; set; }

    /// <summary>
    /// Gets or sets the footer content of the sheet.
    /// </summary>
    [Parameter]
    public RenderFragment Footer { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the sheet is open.
    /// </summary>
    [Parameter]
    public bool IsOpen { get; set; }

    /// <summary>
    /// Gets or sets a callback for when the sheet is requested to close.
    /// </summary>
    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the overlay should be shown.
    /// </summary>
    [Parameter]
    public bool ShowOverlay { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether the sheet should close when the overlay is clicked.
    /// </summary>
    [Parameter]
    public bool CloseOnOverlayClick { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether the close button should be shown.
    /// </summary>
    [Parameter]
    public bool ShowCloseButton { get; set; } = true;

    /// <summary>
    /// Gets or sets the side that the sheet will appear from.
    /// </summary>
    [Parameter]
    public SheetSide Side { get; set; } = SheetSide.Right;

    /// <summary>
    /// Gets or sets the size of the sheet.
    /// </summary>
    [Parameter]
    public SheetSize Size { get; set; } = SheetSize.Default;

    /// <summary>
    /// Gets the component CSS class.
    /// </summary>
    protected override string ComponentClass => "vibe-sheet";

    /// <summary>
    /// Gets a value indicating whether the sheet is in the process of closing.
    /// </summary>
    private bool IsClosing { get; set; }

    /// <summary>
    /// Gets the CSS class for the sheet side.
    /// </summary>
    private string SideClass => $"sheet-{Side.ToString().ToLowerInvariant()}";

    /// <summary>
    /// Gets the inline style for the sheet content based on size.
    /// </summary>
    private string ContentStyle
    {
        get
        {
            return Side switch
            {
                SheetSide.Top or SheetSide.Bottom => $"--sheet-size: {GetSizeValue()};",
                _ => $"--sheet-size: {GetSizeValue()};"
            };
        }
    }

    /// <summary>
    /// Converts the size enum to a CSS value.
    /// </summary>
    private string GetSizeValue()
    {
        return Size switch
        {
            SheetSize.Small => "25%",
            SheetSize.Default => "35%",
            SheetSize.Medium => "50%",
            SheetSize.Large => "75%",
            SheetSize.Full => "100%",
            _ => "35%"
        };
    }

    /// <summary>
    /// Handles when the overlay is clicked.
    /// </summary>
    private async Task OnOverlayClick()
    {
        if (CloseOnOverlayClick)
        {
            await Close();
        }
    }

    /// <summary>
    /// Closes the sheet with an animation.
    /// </summary>
    private async Task Close()
    {
        IsClosing = true;
        StateHasChanged();
        
        // Wait for the animation to complete
        await Task.Delay(300);
        
        IsClosing = false;
        await IsOpenChanged.InvokeAsync(false);
    }
}

/// <summary>
/// Defines the side from which the sheet appears.
/// </summary>
public enum SheetSide
{
    /// <summary>
    /// The sheet appears from the top.
    /// </summary>
    Top,
    
    /// <summary>
    /// The sheet appears from the right.
    /// </summary>
    Right,
    
    /// <summary>
    /// The sheet appears from the bottom.
    /// </summary>
    Bottom,
    
    /// <summary>
    /// The sheet appears from the left.
    /// </summary>
    Left
}

/// <summary>
/// Defines the size of the sheet.
/// </summary>
public enum SheetSize
{
    /// <summary>
    /// Small size (25%).
    /// </summary>
    Small,
    
    /// <summary>
    /// Default size (35%).
    /// </summary>
    Default,
    
    /// <summary>
    /// Medium size (50%).
    /// </summary>
    Medium,
    
    /// <summary>
    /// Large size (75%).
    /// </summary>
    Large,
    
    /// <summary>
    /// Full size (100%).
    /// </summary>
    Full
}