@namespace Vibe.UI.Components
@inherits Base.ThemedComponentBase

<div class="@CombinedClass">
    <div class="combobox-trigger" @onclick="ToggleDropdown">
        <input type="text" 
               class="combobox-input" 
               placeholder="@Placeholder" 
               @bind-value="InputValue" 
               @bind-value:event="oninput"
               @onfocus="OnInputFocus"
               @onkeydown="OnKeyDown"
               autocomplete="off" />
        <div class="combobox-chevron">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="m6 9 6 6 6-6"/>
            </svg>
        </div>
    </div>

    @if (IsOpen)
    {
        <div class="combobox-content">
            @if (FilteredOptions.Any())
            {
                @foreach (var option in FilteredOptions)
                {
                    <div class="combobox-option @(IsSelectedOption(option) ? "selected" : "")" 
                         @onclick="() => SelectOption(option)"
                         @onmouseenter="() => HighlightOption(option)">
                        @option.Label
                    </div>
                }
            }
            else
            {
                <div class="combobox-empty">No results found.</div>
            }
        </div>

        <div class="combobox-backdrop" @onclick="CloseDropdown"></div>
    }
</div>

@code {
    /// <summary>
    /// Represents an option in the combobox.
    /// </summary>
    public class ComboboxOption
    {
        /// <summary>
        /// Gets or sets the option's label.
        /// </summary>
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets the option's value.
        /// </summary>
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets whether the option is disabled.
        /// </summary>
        public bool Disabled { get; set; }
    }

    /// <summary>
    /// Gets or sets the placeholder text.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = "Select an option...";

    /// <summary>
    /// Gets or sets the available options.
    /// </summary>
    [Parameter]
    public List<ComboboxOption> Options { get; set; } = new List<ComboboxOption>();

    /// <summary>
    /// Gets or sets the selected value.
    /// </summary>
    [Parameter]
    public string Value { get; set; }

    /// <summary>
    /// Gets or sets the callback when the value changes.
    /// </summary>
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    /// <summary>
    /// Gets or sets whether to allow free text input.
    /// </summary>
    [Parameter]
    public bool AllowFreeText { get; set; }

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-combobox";

    /// <summary>
    /// The current input value.
    /// </summary>
    private string InputValue
    {
        get => _inputValue;
        set
        {
            _inputValue = value;
            FilterOptions();
        }
    }
    private string _inputValue = string.Empty;

    /// <summary>
    /// Flag to track if the dropdown is open.
    /// </summary>
    private bool IsOpen = false;

    /// <summary>
    /// The filtered options based on the input value.
    /// </summary>
    private List<ComboboxOption> FilteredOptions = new List<ComboboxOption>();

    /// <summary>
    /// The currently highlighted option.
    /// </summary>
    private ComboboxOption HighlightedOption = null;

    /// <summary>
    /// Initialize the component.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateInputFromValue();
        FilterOptions();
    }

    /// <summary>
    /// Updates parameters when they change.
    /// </summary>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateInputFromValue();
    }

    /// <summary>
    /// Updates the input value from the selected value.
    /// </summary>
    private void UpdateInputFromValue()
    {
        if (!string.IsNullOrEmpty(Value))
        {
            var selectedOption = Options.FirstOrDefault(o => o.Value == Value);
            if (selectedOption != null)
            {
                _inputValue = selectedOption.Label;
            }
            else if (AllowFreeText)
            {
                _inputValue = Value;
            }
        }
    }

    /// <summary>
    /// Filters the options based on the input value.
    /// </summary>
    private void FilterOptions()
    {
        FilteredOptions = string.IsNullOrWhiteSpace(InputValue)
            ? Options.Where(o => !o.Disabled).ToList()
            : Options.Where(o => !o.Disabled && 
                               o.Label.Contains(InputValue, StringComparison.OrdinalIgnoreCase))
                    .ToList();
        
        HighlightedOption = FilteredOptions.FirstOrDefault();
    }

    /// <summary>
    /// Toggles the dropdown state.
    /// </summary>
    private void ToggleDropdown()
    {
        IsOpen = !IsOpen;
        if (IsOpen)
        {
            FilterOptions();
        }
    }

    /// <summary>
    /// Closes the dropdown.
    /// </summary>
    private void CloseDropdown()
    {
        IsOpen = false;
    }

    /// <summary>
    /// Handles input focus.
    /// </summary>
    private void OnInputFocus()
    {
        IsOpen = true;
        FilterOptions();
    }

    /// <summary>
    /// Handles keyboard navigation.
    /// </summary>
    /// <param name="e">The keyboard event args.</param>
    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowDown":
                if (!IsOpen)
                {
                    IsOpen = true;
                    FilterOptions();
                }
                else
                {
                    MoveHighlight(1);
                }
                break;
                
            case "ArrowUp":
                if (IsOpen)
                {
                    MoveHighlight(-1);
                }
                break;
                
            case "Enter":
                if (IsOpen && HighlightedOption != null)
                {
                    await SelectOption(HighlightedOption);
                }
                else if (AllowFreeText && !string.IsNullOrWhiteSpace(InputValue))
                {
                    await ValueChanged.InvokeAsync(InputValue);
                    CloseDropdown();
                }
                break;
                
            case "Escape":
                CloseDropdown();
                break;
        }
    }

    /// <summary>
    /// Moves the highlight to the next or previous option.
    /// </summary>
    /// <param name="step">The direction to move (1 for down, -1 for up).</param>
    private void MoveHighlight(int step)
    {
        if (!FilteredOptions.Any())
            return;
            
        var currentIndex = FilteredOptions.IndexOf(HighlightedOption);
        if (currentIndex == -1)
        {
            HighlightedOption = FilteredOptions.FirstOrDefault();
        }
        else
        {
            var newIndex = (currentIndex + step + FilteredOptions.Count) % FilteredOptions.Count;
            HighlightedOption = FilteredOptions[newIndex];
        }
    }

    /// <summary>
    /// Highlights an option.
    /// </summary>
    /// <param name="option">The option to highlight.</param>
    private void HighlightOption(ComboboxOption option)
    {
        HighlightedOption = option;
    }

    /// <summary>
    /// Checks if an option is the currently selected one.
    /// </summary>
    /// <param name="option">The option to check.</param>
    private bool IsSelectedOption(ComboboxOption option)
    {
        return HighlightedOption == option;
    }

    /// <summary>
    /// Selects an option.
    /// </summary>
    /// <param name="option">The option to select.</param>
    private async Task SelectOption(ComboboxOption option)
    {
        if (option == null || option.Disabled)
            return;
            
        InputValue = option.Label;
        await ValueChanged.InvokeAsync(option.Value);
        CloseDropdown();
    }
}