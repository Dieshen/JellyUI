@namespace VibeUI.Components
@implements IDisposable
@inherits Base.ThemedComponentBase
@inject IJSRuntime JSRuntime

<div class="@CombinedClass" @attributes="AdditionalAttributes">
    <div class="carousel-viewport" @ref="ViewportRef" @onmousedown="OnMouseDown" @onmousemove="OnMouseMove" @onmouseup="OnMouseUp" @onmouseleave="OnMouseLeave">
        <div class="carousel-container" style="@ContainerStyle">
            <CascadingValue Value="this" IsFixed="true">
                @ChildContent
            </CascadingValue>
        </div>

        @if (ShowNavigation && Items.Count > 1)
        {
            <div class="carousel-navigation">
                <button class="carousel-button carousel-prev-button" @onclick="PrevSlide" disabled="@(ActiveIndex <= 0)">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="carousel-button-icon"><polyline points="15 18 9 12 15 6"></polyline></svg>
                </button>
                <button class="carousel-button carousel-next-button" @onclick="NextSlide" disabled="@(ActiveIndex >= Items.Count - 1)">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="carousel-button-icon"><polyline points="9 18 15 12 9 6"></polyline></svg>
                </button>
            </div>
        }

        @if (ShowIndicators && Items.Count > 1)
        {
            <div class="carousel-indicators">
                @for (int i = 0; i < Items.Count; i++)
                {
                    var index = i;
                    <button class="carousel-indicator @(i == ActiveIndex ? "active" : "")" @onclick="() => GoToSlide(index)"></button>
                }
            </div>
        }
    </div>
</div>

@code {
    /// <summary>
    /// Gets or sets the content of the carousel.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether to show navigation arrows.
    /// </summary>
    [Parameter]
    public bool ShowNavigation { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether to show indicator dots.
    /// </summary>
    [Parameter]
    public bool ShowIndicators { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether slides should wrap around when reaching the end.
    /// </summary>
    [Parameter]
    public bool Loop { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether the carousel should automatically advance slides.
    /// </summary>
    [Parameter]
    public bool AutoPlay { get; set; } = false;

    /// <summary>
    /// Gets or sets the interval in milliseconds for auto-advancing slides.
    /// </summary>
    [Parameter]
    public int AutoPlayInterval { get; set; } = 3000;

    /// <summary>
    /// Gets or sets a value indicating whether dragging is enabled.
    /// </summary>
    [Parameter]
    public bool EnableDrag { get; set; } = true;

    /// <summary>
    /// Gets or sets the active slide index.
    /// </summary>
    [Parameter]
    public int ActiveIndex { get; set; } = 0;

    /// <summary>
    /// Gets or sets the callback for when the active slide changes.
    /// </summary>
    [Parameter]
    public EventCallback<int> ActiveIndexChanged { get; set; }

    /// <summary>
    /// Gets or sets the orientation of the carousel.
    /// </summary>
    [Parameter]
    public CarouselOrientation Orientation { get; set; } = CarouselOrientation.Horizontal;

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-carousel";

    /// <summary>
    /// Gets or sets the list of carousel items.
    /// </summary>
    public List<CarouselItem> Items { get; set; } = new List<CarouselItem>();

    /// <summary>
    /// Gets or sets the viewport element reference.
    /// </summary>
    private ElementReference ViewportRef;

    private System.Timers.Timer _autoPlayTimer;
    private bool _isDragging = false;
    private double _dragStartX;
    private double _dragStartY;
    private double _dragCurrentOffset = 0;
    private double _initialOffset = 0;
    private double _currentOffset = 0;
    private bool _isSwiping = false;
    private DateTime _lastAutoAdvance = DateTime.Now;

    /// <summary>
    /// Gets the container style based on orientation and active index.
    /// </summary>
    private string ContainerStyle
    {
        get
        {
            if (Orientation == CarouselOrientation.Horizontal)
            {
                double translateX = -100 * ActiveIndex + _dragCurrentOffset;
                return $"transform: translateX({translateX}%)";
            }
            else
            {
                double translateY = -100 * ActiveIndex + _dragCurrentOffset;
                return $"flex-direction: column; transform: translateY({translateY}%)";
            }
        }
    }

    /// <summary>
    /// Initializes the component.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetupAutoPlay();
    }

    /// <summary>
    /// Sets up auto play timer if needed.
    /// </summary>
    private void SetupAutoPlay()
    {
        if (AutoPlay && Items.Count > 1)
        {
            _autoPlayTimer = new System.Timers.Timer(AutoPlayInterval);
            _autoPlayTimer.Elapsed += (sender, args) =>
            {
                if ((DateTime.Now - _lastAutoAdvance).TotalMilliseconds >= AutoPlayInterval && !_isDragging)
                {
                    InvokeAsync(() =>
                    {
                        NextSlide();
                        StateHasChanged();
                    });
                    _lastAutoAdvance = DateTime.Now;
                }
            };
            _autoPlayTimer.Start();
        }
        else if (_autoPlayTimer != null)
        {
            _autoPlayTimer.Stop();
            _autoPlayTimer.Dispose();
            _autoPlayTimer = null;
        }
    }

    /// <summary>
    /// Adds a carousel item to the collection.
    /// </summary>
    /// <param name="item">The carousel item to add.</param>
    internal void AddItem(CarouselItem item)
    {
        Items.Add(item);
        StateHasChanged();
        SetupAutoPlay();
    }

    /// <summary>
    /// Navigates to the previous slide.
    /// </summary>
    private async Task PrevSlide()
    {
        if (ActiveIndex > 0)
        {
            await GoToSlide(ActiveIndex - 1);
        }
        else if (Loop)
        {
            await GoToSlide(Items.Count - 1);
        }
    }

    /// <summary>
    /// Navigates to the next slide.
    /// </summary>
    private async Task NextSlide()
    {
        if (ActiveIndex < Items.Count - 1)
        {
            await GoToSlide(ActiveIndex + 1);
        }
        else if (Loop)
        {
            await GoToSlide(0);
        }
    }

    /// <summary>
    /// Goes to a specific slide.
    /// </summary>
    /// <param name="index">The index of the slide to go to.</param>
    private async Task GoToSlide(int index)
    {
        if (index != ActiveIndex)
        {
            ActiveIndex = index;
            await ActiveIndexChanged.InvokeAsync(ActiveIndex);
            _lastAutoAdvance = DateTime.Now;
        }
    }

    /// <summary>
    /// Handles mouse down event for dragging.
    /// </summary>
    private void OnMouseDown(MouseEventArgs args)
    {
        if (!EnableDrag || Items.Count <= 1) return;

        _isDragging = true;
        _dragStartX = args.ClientX;
        _dragStartY = args.ClientY;
        _initialOffset = _currentOffset;
        _isSwiping = false;
    }

    /// <summary>
    /// Handles mouse move event for dragging.
    /// </summary>
    private void OnMouseMove(MouseEventArgs args)
    {
        if (!_isDragging) return;

        double diffX = args.ClientX - _dragStartX;
        double diffY = args.ClientY - _dragStartY;

        // Determine if we're swiping horizontally or vertically
        if (!_isSwiping && (Math.Abs(diffX) > 5 || Math.Abs(diffY) > 5))
        {
            _isSwiping = true;
        }

        if (_isSwiping)
        {
            double containerSize = 100; // 100%
            double delta = Orientation == CarouselOrientation.Horizontal ? diffX : diffY;
            double percentage = (delta / 300) * 100; // Convert to percentage
            _dragCurrentOffset = percentage;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Handles mouse up event for dragging.
    /// </summary>
    private async Task OnMouseUp(MouseEventArgs args)
    {
        if (!_isDragging) return;

        _isDragging = false;
        
        if (_isSwiping)
        {
            double diffX = args.ClientX - _dragStartX;
            double diffY = args.ClientY - _dragStartY;
            double threshold = 50; // Pixels to trigger slide change

            if (Orientation == CarouselOrientation.Horizontal)
            {
                if (diffX > threshold)
                {
                    await PrevSlide();
                }
                else if (diffX < -threshold)
                {
                    await NextSlide();
                }
            }
            else
            {
                if (diffY > threshold)
                {
                    await PrevSlide();
                }
                else if (diffY < -threshold)
                {
                    await NextSlide();
                }
            }
        }

        _dragCurrentOffset = 0;
        _currentOffset = _initialOffset;
        StateHasChanged();
    }

    /// <summary>
    /// Handles mouse leave event for dragging.
    /// </summary>
    private async Task OnMouseLeave(MouseEventArgs args)
    {
        if (_isDragging)
        {
            await OnMouseUp(args);
        }
    }

    /// <summary>
    /// Disposes the component.
    /// </summary>
    public void Dispose()
    {
        _autoPlayTimer?.Dispose();
    }
}

/// <summary>
/// Defines the orientation of the carousel.
/// </summary>
public enum CarouselOrientation
{
    /// <summary>
    /// Slides move horizontally.
    /// </summary>
    Horizontal,
    
    /// <summary>
    /// Slides move vertically.
    /// </summary>
    Vertical
}