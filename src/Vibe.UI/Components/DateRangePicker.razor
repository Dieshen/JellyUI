@namespace VibeUI.Components
@inherits Base.ThemedComponentBase
@inject IJSRuntime JSRuntime

<div class="@CombinedClass">
    <div class="daterange-input-wrapper">
        <div class="daterange-inputs">
            <Input 
                class="daterange-start-input"
                type="text"
                Value="@FormattedStartDate"
                readonly="true"
                placeholder="@StartDatePlaceholder"
                disabled="@Disabled" 
                @onclick="() => ToggleCalendar(true)" />
                
            <div class="daterange-separator">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12h14"></path></svg>
            </div>
            
            <Input 
                class="daterange-end-input"
                type="text"
                Value="@FormattedEndDate"
                readonly="true"
                placeholder="@EndDatePlaceholder"
                disabled="@Disabled" 
                @onclick="() => ToggleCalendar(false)" />
        </div>
        
        <div class="daterange-icon" @onclick="() => ToggleCalendar()">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"></rect><line x1="16" x2="16" y1="2" y2="6"></line><line x1="8" x2="8" y1="2" y2="6"></line><line x1="3" x2="21" y1="10" y2="10"></line></svg>
        </div>
    </div>
    
    @if (IsOpen)
    {
        <div class="daterange-popup">
            <div class="daterange-header">
                <div class="daterange-header-section">
                    <button type="button" class="daterange-nav-btn" @onclick="PreviousMonth">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"></path></svg>
                    </button>
                    <div class="daterange-header-label">
                        <select class="daterange-month-select" value="@CurrentStartMonth" @onchange="HandleStartMonthChange">
                            @for (int i = 0; i < 12; i++)
                            {
                                <option value="@i">@DateTimeFormatInfo.CurrentInfo.GetMonthName(i + 1)</option>
                            }
                        </select>
                        <select class="daterange-year-select" value="@CurrentStartYear" @onchange="HandleStartYearChange">
                            @for (int i = MinYear; i <= MaxYear; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                </div>
                
                <div class="daterange-header-section">
                    <div class="daterange-header-label">
                        <select class="daterange-month-select" value="@CurrentEndMonth" @onchange="HandleEndMonthChange">
                            @for (int i = 0; i < 12; i++)
                            {
                                <option value="@i">@DateTimeFormatInfo.CurrentInfo.GetMonthName(i + 1)</option>
                            }
                        </select>
                        <select class="daterange-year-select" value="@CurrentEndYear" @onchange="HandleEndYearChange">
                            @for (int i = MinYear; i <= MaxYear; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                    <button type="button" class="daterange-nav-btn" @onclick="NextMonth">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"></path></svg>
                    </button>
                </div>
            </div>
            
            <div class="daterange-calendars">
                <div class="daterange-calendar">
                    <div class="daterange-day-names">
                        @foreach (var day in DayNames)
                        {
                            <div class="daterange-day-name">@day</div>
                        }
                    </div>
                    
                    <div class="daterange-grid">
                        @foreach (var week in StartCalendarDays)
                        {
                            <div class="daterange-week">
                                @foreach (var day in week)
                                {
                                    <button 
                                        type="button"
                                        class="@GetStartDayClass(day)"
                                        disabled="@(!day.IsCurrentMonth || !IsInRange(day.Date) || Disabled)"
                                        @onclick="() => SelectStartDate(day.Date)">
                                        @day.DayNumber
                                    </button>
                                }
                            </div>
                        }
                    </div>
                </div>
                
                <div class="daterange-calendar">
                    <div class="daterange-day-names">
                        @foreach (var day in DayNames)
                        {
                            <div class="daterange-day-name">@day</div>
                        }
                    </div>
                    
                    <div class="daterange-grid">
                        @foreach (var week in EndCalendarDays)
                        {
                            <div class="daterange-week">
                                @foreach (var day in week)
                                {
                                    <button 
                                        type="button"
                                        class="@GetEndDayClass(day)"
                                        disabled="@(!day.IsCurrentMonth || !IsInRange(day.Date) || IsBeforeStartDate(day.Date) || Disabled)"
                                        @onclick="() => SelectEndDate(day.Date)">
                                        @day.DayNumber
                                    </button>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="daterange-footer">
                <div class="daterange-presets">
                    <button type="button" class="daterange-preset-btn" @onclick="SelectToday">Today</button>
                    <button type="button" class="daterange-preset-btn" @onclick="SelectLastWeek">Last 7 days</button>
                    <button type="button" class="daterange-preset-btn" @onclick="SelectLastMonth">Last 30 days</button>
                    <button type="button" class="daterange-preset-btn" @onclick="SelectLastQuarter">Last 90 days</button>
                </div>
                <button type="button" class="daterange-apply-btn" @onclick="ApplySelection">Apply</button>
            </div>
        </div>
        
        <div class="daterange-backdrop" @onclick="CloseCalendar"></div>
    }
</div>

@code {
    /// <summary>
    /// Represents a calendar day.
    /// </summary>
    private class CalendarDay
    {
        public DateTime Date { get; set; }
        public int DayNumber { get; set; }
        public bool IsCurrentMonth { get; set; }
        public bool IsToday { get; set; }
    }

    /// <summary>
    /// Gets or sets the start date.
    /// </summary>
    [Parameter]
    public DateTime? StartDate { get; set; }

    /// <summary>
    /// Gets or sets the end date.
    /// </summary>
    [Parameter]
    public DateTime? EndDate { get; set; }

    /// <summary>
    /// Gets or sets the callback when the dates change.
    /// </summary>
    [Parameter]
    public EventCallback<(DateTime? StartDate, DateTime? EndDate)> OnChange { get; set; }

    /// <summary>
    /// Gets or sets the date format.
    /// </summary>
    [Parameter]
    public string Format { get; set; } = "MM/dd/yyyy";

    /// <summary>
    /// Gets or sets the placeholder for the start date.
    /// </summary>
    [Parameter]
    public string StartDatePlaceholder { get; set; } = "Start Date";

    /// <summary>
    /// Gets or sets the placeholder for the end date.
    /// </summary>
    [Parameter]
    public string EndDatePlaceholder { get; set; } = "End Date";

    /// <summary>
    /// Gets or sets whether the date picker is disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Gets or sets the minimum selectable date.
    /// </summary>
    [Parameter]
    public DateTime? MinDate { get; set; }

    /// <summary>
    /// Gets or sets the maximum selectable date.
    /// </summary>
    [Parameter]
    public DateTime? MaxDate { get; set; }

    /// <summary>
    /// Gets or sets the first day of the week (0 = Sunday, 1 = Monday, etc.).
    /// </summary>
    [Parameter]
    public int FirstDayOfWeek { get; set; } = 0;

    /// <summary>
    /// Gets or sets the minimum year.
    /// </summary>
    [Parameter]
    public int MinYear { get; set; } = DateTime.Today.Year - 100;

    /// <summary>
    /// Gets or sets the maximum year.
    /// </summary>
    [Parameter]
    public int MaxYear { get; set; } = DateTime.Today.Year + 100;

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-daterange-picker";

    /// <summary>
    /// Flag to track if the calendar is open.
    /// </summary>
    private bool IsOpen { get; set; }

    /// <summary>
    /// Current month (0-11) displayed in the start calendar.
    /// </summary>
    private int CurrentStartMonth { get; set; }

    /// <summary>
    /// Current year displayed in the start calendar.
    /// </summary>
    private int CurrentStartYear { get; set; }

    /// <summary>
    /// Current month (0-11) displayed in the end calendar.
    /// </summary>
    private int CurrentEndMonth { get; set; }

    /// <summary>
    /// Current year displayed in the end calendar.
    /// </summary>
    private int CurrentEndYear { get; set; }

    /// <summary>
    /// Temporary start date used for selection.
    /// </summary>
    private DateTime? TempStartDate { get; set; }

    /// <summary>
    /// Temporary end date used for selection.
    /// </summary>
    private DateTime? TempEndDate { get; set; }

    /// <summary>
    /// Flag to track which input was clicked (true = start date, false = end date).
    /// </summary>
    private bool StartDateFocused { get; set; } = true;

    /// <summary>
    /// The formatted start date for display.
    /// </summary>
    private string FormattedStartDate => StartDate.HasValue ? StartDate.Value.ToString(Format) : string.Empty;

    /// <summary>
    /// The formatted end date for display.
    /// </summary>
    private string FormattedEndDate => EndDate.HasValue ? EndDate.Value.ToString(Format) : string.Empty;

    /// <summary>
    /// The day names to display in the calendar.
    /// </summary>
    private string[] DayNames => GetDayNames();

    /// <summary>
    /// The calendar days for the start date month.
    /// </summary>
    private List<List<CalendarDay>> StartCalendarDays => GenerateCalendar(CurrentStartYear, CurrentStartMonth);

    /// <summary>
    /// The calendar days for the end date month.
    /// </summary>
    private List<List<CalendarDay>> EndCalendarDays => GenerateCalendar(CurrentEndYear, CurrentEndMonth);

    /// <summary>
    /// Initialize the component.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        InitializeCalendars();
    }

    /// <summary>
    /// Update the calendar views when parameters change.
    /// </summary>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // Initialize temp dates from parameters
        TempStartDate = StartDate;
        TempEndDate = EndDate;
    }

    /// <summary>
    /// Initialize the calendar months.
    /// </summary>
    private void InitializeCalendars()
    {
        var today = DateTime.Today;
        
        // Initialize start date calendar
        if (StartDate.HasValue)
        {
            CurrentStartMonth = StartDate.Value.Month - 1;
            CurrentStartYear = StartDate.Value.Year;
        }
        else
        {
            CurrentStartMonth = today.Month - 1;
            CurrentStartYear = today.Year;
        }

        // Initialize end date calendar
        if (EndDate.HasValue)
        {
            CurrentEndMonth = EndDate.Value.Month - 1;
            CurrentEndYear = EndDate.Value.Year;
        }
        else
        {
            // If no end date, show next month for end calendar
            var nextMonth = today.AddMonths(1);
            CurrentEndMonth = nextMonth.Month - 1;
            CurrentEndYear = nextMonth.Year;
        }
    }

    /// <summary>
    /// Toggles the calendar visibility.
    /// </summary>
    /// <param name="focusStartDate">Whether to focus the start date input.</param>
    private void ToggleCalendar(bool? focusStartDate = null)
    {
        if (!Disabled)
        {
            if (focusStartDate.HasValue)
            {
                StartDateFocused = focusStartDate.Value;
            }
            
            IsOpen = !IsOpen;
            
            if (IsOpen)
            {
                // Reset temp dates when opening
                TempStartDate = StartDate;
                TempEndDate = EndDate;
            }
        }
    }

    /// <summary>
    /// Closes the calendar.
    /// </summary>
    private void CloseCalendar()
    {
        IsOpen = false;
    }

    /// <summary>
    /// Navigates to the previous month in both calendars.
    /// </summary>
    private void PreviousMonth()
    {
        CurrentStartMonth--;
        if (CurrentStartMonth < 0)
        {
            CurrentStartMonth = 11;
            CurrentStartYear--;
        }

        CurrentEndMonth--;
        if (CurrentEndMonth < 0)
        {
            CurrentEndMonth = 11;
            CurrentEndYear--;
        }
    }

    /// <summary>
    /// Navigates to the next month in both calendars.
    /// </summary>
    private void NextMonth()
    {
        CurrentStartMonth++;
        if (CurrentStartMonth > 11)
        {
            CurrentStartMonth = 0;
            CurrentStartYear++;
        }

        CurrentEndMonth++;
        if (CurrentEndMonth > 11)
        {
            CurrentEndMonth = 0;
            CurrentEndYear++;
        }
    }

    /// <summary>
    /// Handles start month changes from the dropdown.
    /// </summary>
    private void HandleStartMonthChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int month))
        {
            CurrentStartMonth = month;
            
            // Ensure end calendar is after start calendar
            EnsureEndCalendarAfterStart();
        }
    }

    /// <summary>
    /// Handles start year changes from the dropdown.
    /// </summary>
    private void HandleStartYearChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int year))
        {
            CurrentStartYear = year;
            
            // Ensure end calendar is after start calendar
            EnsureEndCalendarAfterStart();
        }
    }

    /// <summary>
    /// Handles end month changes from the dropdown.
    /// </summary>
    private void HandleEndMonthChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int month))
        {
            CurrentEndMonth = month;
            
            // Ensure start calendar is before end calendar
            EnsureStartCalendarBeforeEnd();
        }
    }

    /// <summary>
    /// Handles end year changes from the dropdown.
    /// </summary>
    private void HandleEndYearChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int year))
        {
            CurrentEndYear = year;
            
            // Ensure start calendar is before end calendar
            EnsureStartCalendarBeforeEnd();
        }
    }

    /// <summary>
    /// Ensures that the end calendar is after the start calendar.
    /// </summary>
    private void EnsureEndCalendarAfterStart()
    {
        var startDate = new DateTime(CurrentStartYear, CurrentStartMonth + 1, 1);
        var endDate = new DateTime(CurrentEndYear, CurrentEndMonth + 1, 1);
        
        if (endDate <= startDate)
        {
            var nextMonth = startDate.AddMonths(1);
            CurrentEndMonth = nextMonth.Month - 1;
            CurrentEndYear = nextMonth.Year;
        }
    }

    /// <summary>
    /// Ensures that the start calendar is before the end calendar.
    /// </summary>
    private void EnsureStartCalendarBeforeEnd()
    {
        var startDate = new DateTime(CurrentStartYear, CurrentStartMonth + 1, 1);
        var endDate = new DateTime(CurrentEndYear, CurrentEndMonth + 1, 1);
        
        if (startDate >= endDate)
        {
            var prevMonth = endDate.AddMonths(-1);
            CurrentStartMonth = prevMonth.Month - 1;
            CurrentStartYear = prevMonth.Year;
        }
    }

    /// <summary>
    /// Selects a start date.
    /// </summary>
    /// <param name="date">The date to select.</param>
    private void SelectStartDate(DateTime date)
    {
        TempStartDate = date;
        
        // If end date is before start date, clear it
        if (TempEndDate.HasValue && TempEndDate.Value < date)
        {
            TempEndDate = null;
        }
        
        // If we don't have an end date selected, focus the end date
        if (!TempEndDate.HasValue)
        {
            StartDateFocused = false;
        }
    }

    /// <summary>
    /// Selects an end date.
    /// </summary>
    /// <param name="date">The date to select.</param>
    private void SelectEndDate(DateTime date)
    {
        // Only allow end dates that are after the start date
        if (TempStartDate.HasValue && date >= TempStartDate.Value)
        {
            TempEndDate = date;
        }
    }

    /// <summary>
    /// Applies the selected date range.
    /// </summary>
    private async Task ApplySelection()
    {
        StartDate = TempStartDate;
        EndDate = TempEndDate;
        
        await OnChange.InvokeAsync((StartDate, EndDate));
        CloseCalendar();
    }

    /// <summary>
    /// Selects today's date.
    /// </summary>
    private void SelectToday()
    {
        var today = DateTime.Today;
        if (IsInRange(today))
        {
            TempStartDate = today;
            TempEndDate = today;
        }
    }

    /// <summary>
    /// Selects the last 7 days.
    /// </summary>
    private void SelectLastWeek()
    {
        var today = DateTime.Today;
        var weekAgo = today.AddDays(-6);
        
        if (IsInRange(weekAgo) && IsInRange(today))
        {
            TempStartDate = weekAgo;
            TempEndDate = today;
        }
    }

    /// <summary>
    /// Selects the last 30 days.
    /// </summary>
    private void SelectLastMonth()
    {
        var today = DateTime.Today;
        var monthAgo = today.AddDays(-29);
        
        if (IsInRange(monthAgo) && IsInRange(today))
        {
            TempStartDate = monthAgo;
            TempEndDate = today;
        }
    }

    /// <summary>
    /// Selects the last 90 days.
    /// </summary>
    private void SelectLastQuarter()
    {
        var today = DateTime.Today;
        var quarterAgo = today.AddDays(-89);
        
        if (IsInRange(quarterAgo) && IsInRange(today))
        {
            TempStartDate = quarterAgo;
            TempEndDate = today;
        }
    }

    /// <summary>
    /// Gets the CSS class for a day in the start calendar.
    /// </summary>
    /// <param name="day">The calendar day.</param>
    /// <returns>The CSS class.</returns>
    private string GetStartDayClass(CalendarDay day)
    {
        var classes = new List<string> { "daterange-day" };

        if (!day.IsCurrentMonth)
        {
            classes.Add("outside-month");
        }

        if (day.IsToday)
        {
            classes.Add("today");
        }

        if (TempStartDate.HasValue && day.Date.Date == TempStartDate.Value.Date)
        {
            classes.Add("selected");
            classes.Add("range-start");
        }

        if (IsInRange(day.Date))
        {
            classes.Add("in-range");
        }

        return string.Join(" ", classes);
    }

    /// <summary>
    /// Gets the CSS class for a day in the end calendar.
    /// </summary>
    /// <param name="day">The calendar day.</param>
    /// <returns>The CSS class.</returns>
    private string GetEndDayClass(CalendarDay day)
    {
        var classes = new List<string> { "daterange-day" };

        if (!day.IsCurrentMonth)
        {
            classes.Add("outside-month");
        }

        if (day.IsToday)
        {
            classes.Add("today");
        }

        if (TempEndDate.HasValue && day.Date.Date == TempEndDate.Value.Date)
        {
            classes.Add("selected");
            classes.Add("range-end");
        }

        // Add in-range class for days between start and end
        if (TempStartDate.HasValue && TempEndDate.HasValue && 
            day.Date >= TempStartDate.Value.Date && day.Date <= TempEndDate.Value.Date)
        {
            classes.Add("in-range");
        }
        else if (TempStartDate.HasValue && day.Date.Date == TempStartDate.Value.Date)
        {
            classes.Add("in-range");
            classes.Add("range-start");
        }

        return string.Join(" ", classes);
    }

    /// <summary>
    /// Gets the day names for the calendar header.
    /// </summary>
    /// <returns>An array of day names.</returns>
    private string[] GetDayNames()
    {
        var dayNames = new string[7];
        var culture = CultureInfo.CurrentCulture;
        var daysOfWeek = culture.DateTimeFormat.AbbreviatedDayNames;
        
        for (int i = 0; i < 7; i++)
        {
            var dayIndex = (i + FirstDayOfWeek) % 7;
            dayNames[i] = daysOfWeek[dayIndex];
        }
        
        return dayNames;
    }

    /// <summary>
    /// Generates the calendar days for a specific month.
    /// </summary>
    /// <param name="year">The year.</param>
    /// <param name="month">The month (0-11).</param>
    /// <returns>A list of calendar weeks.</returns>
    private List<List<CalendarDay>> GenerateCalendar(int year, int month)
    {
        var today = DateTime.Today;
        var firstDay = new DateTime(year, month + 1, 1);
        var lastDay = firstDay.AddMonths(1).AddDays(-1);
        
        var calendar = new List<List<CalendarDay>>();
        var currentWeek = new List<CalendarDay>();
        
        // Calculate the first day to display
        int dayOfWeek = (int)firstDay.DayOfWeek;
        int diff = (dayOfWeek - FirstDayOfWeek + 7) % 7;
        var start = firstDay.AddDays(-diff);
        
        // Generate 6 weeks (42 days) to ensure we have enough rows
        for (int i = 0; i < 42; i++)
        {
            var currentDate = start.AddDays(i);
            var isCurrentMonth = currentDate.Month == month + 1 && currentDate.Year == year;
            
            var day = new CalendarDay
            {
                Date = currentDate,
                DayNumber = currentDate.Day,
                IsCurrentMonth = isCurrentMonth,
                IsToday = currentDate.Date == today.Date
            };
            
            currentWeek.Add(day);
            
            // Start a new week after 7 days
            if (currentWeek.Count == 7)
            {
                calendar.Add(currentWeek);
                currentWeek = new List<CalendarDay>();
                
                // If we've added enough days from the next month, we can stop
                if (calendar.Count >= 4 && !isCurrentMonth)
                {
                    break;
                }
            }
        }
        
        return calendar;
    }

    /// <summary>
    /// Checks if a date is within the allowed range.
    /// </summary>
    /// <param name="date">The date to check.</param>
    /// <returns>True if the date is within range.</returns>
    private bool IsInRange(DateTime date)
    {
        if (MinDate.HasValue && date < MinDate.Value)
        {
            return false;
        }
        
        if (MaxDate.HasValue && date > MaxDate.Value)
        {
            return false;
        }
        
        return true;
    }

    /// <summary>
    /// Checks if a date is before the start date.
    /// </summary>
    /// <param name="date">The date to check.</param>
    /// <returns>True if the date is before the start date.</returns>
    private bool IsBeforeStartDate(DateTime date)
    {
        return TempStartDate.HasValue && date < TempStartDate.Value;
    }

    /// <summary>
    /// Add a click event listener to close the calendar when clicking outside.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            // In a real implementation, we would add JS interop to handle clicking outside
        }
    }
}