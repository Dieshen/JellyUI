@namespace VibeUI.Components
@inherits Base.ThemedComponentBase

@if (IsOpen || IsClosing)
{
    <div class="@CombinedClass @(IsClosing ? "closing" : "") @SideClass">
        <div class="drawer-overlay" @onclick="OnOverlayClick"></div>
        <div class="drawer-content">
            @if (ShowCloseButton)
            {
                <button type="button" class="drawer-close" @onclick="Close" aria-label="Close">
                    <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path>
                    </svg>
                </button>
            }
            <div class="drawer-body">
                @ChildContent
            </div>
        </div>
    </div>
}

@code {
    /// <summary>
    /// Gets or sets the content of the drawer.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets whether the drawer is open.
    /// </summary>
    [Parameter]
    public bool IsOpen { get; set; }

    /// <summary>
    /// Gets or sets the callback when the drawer is opened.
    /// </summary>
    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    /// <summary>
    /// Gets or sets the side from which the drawer appears.
    /// </summary>
    [Parameter]
    public string Side { get; set; } = "right";

    /// <summary>
    /// Gets or sets whether to show the close button.
    /// </summary>
    [Parameter]
    public bool ShowCloseButton { get; set; } = true;

    /// <summary>
    /// Gets or sets whether to close the drawer when clicking the overlay.
    /// </summary>
    [Parameter]
    public bool CloseOnOverlayClick { get; set; } = true;

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-drawer";

    /// <summary>
    /// Gets the CSS class for the drawer side.
    /// </summary>
    private string SideClass => $"drawer-{Side}";

    /// <summary>
    /// Flag to track if the drawer is in the process of closing.
    /// </summary>
    private bool IsClosing = false;

    /// <summary>
    /// Updates component parameters.
    /// </summary>
    /// <param name="parameters">The parameters to set.</param>
    public override Task SetParametersAsync(ParameterView parameters)
    {
        var previousIsOpen = IsOpen;
        var result = base.SetParametersAsync(parameters);
        
        // Check if the drawer is being closed
        if (previousIsOpen && !IsOpen)
        {
            IsClosing = false;
        }
        
        return result;
    }

    /// <summary>
    /// Handles the click on the overlay.
    /// </summary>
    private void OnOverlayClick()
    {
        if (CloseOnOverlayClick)
        {
            Close();
        }
    }

    /// <summary>
    /// Closes the drawer.
    /// </summary>
    private async Task Close()
    {
        IsClosing = true;
        await Task.Delay(300); // Wait for closing animation
        IsClosing = false;
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }
}