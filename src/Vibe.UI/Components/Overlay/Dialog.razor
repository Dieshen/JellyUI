@inherits Vibe.UI.Base.ThemedComponentBase

@if (IsOpen)
{
    <div class="vibe-dialog-overlay" @onclick="OnOutsideClick">
        <div class="vibe-dialog @CombinedClass" role="dialog" aria-modal="true" @onclick:stopPropagation="true" @attributes="AdditionalAttributes">
            @if (Header != null)
            {
                <div class="vibe-dialog-header">
                    @Header
                </div>
            }
            
            <div class="vibe-dialog-body">
                @ChildContent
            </div>
            
            @if (Footer != null)
            {
                <div class="vibe-dialog-footer">
                    @Footer
                </div>
            }
        </div>
    </div>
}

@code {
    /// <summary>
    /// Gets or sets the dialog content
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the dialog header
    /// </summary>
    [Parameter]
    public RenderFragment Header { get; set; }

    /// <summary>
    /// Gets or sets the dialog footer
    /// </summary>
    [Parameter]
    public RenderFragment Footer { get; set; }

    /// <summary>
    /// Gets or sets whether the dialog is open
    /// </summary>
    [Parameter]
    public bool IsOpen { get; set; }

    /// <summary>
    /// Gets or sets the callback for when the dialog state changes
    /// </summary>
    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    /// <summary>
    /// Gets or sets whether clicking outside the dialog should close it
    /// </summary>
    [Parameter]
    public bool CloseOnOutsideClick { get; set; } = true;

    /// <summary>
    /// Gets or sets whether pressing Escape should close the dialog
    /// </summary>
    [Parameter]
    public bool CloseOnEscape { get; set; } = true;

    /// <inheritdoc/>
    protected override string ComponentClass => "vibe-dialog";

    /// <summary>
    /// Called when the dialog is opened
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        // Add event listener for Escape key when dialog is opened
        if (IsOpen && CloseOnEscape)
        {
            await JSRuntime.InvokeVoidAsync("window.addEventListener", "keydown", new Action<KeyboardEventArgs>(HandleKeyDown));
        }
    }

    /// <summary>
    /// Called when the dialog is closed or opened
    /// </summary>
    /// <param name="firstRender">Whether this is the first render</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        // When dialog opens, add event listener for Escape key
        if (IsOpen && CloseOnEscape)
        {
            await JSRuntime.InvokeVoidAsync("window.addEventListener", "keydown", new Action<KeyboardEventArgs>(HandleKeyDown));
        }
        else
        {
            // When dialog closes, remove event listener
            await JSRuntime.InvokeVoidAsync("window.removeEventListener", "keydown", new Action<KeyboardEventArgs>(HandleKeyDown));
        }
    }

    /// <summary>
    /// Handles key down events to close the dialog when Escape is pressed
    /// </summary>
    /// <param name="e">Keyboard event args</param>
    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape" && CloseOnEscape)
        {
            await CloseDialog();
        }
    }

    /// <summary>
    /// Handles click events outside the dialog to close it when configured
    /// </summary>
    private async Task OnOutsideClick()
    {
        if (CloseOnOutsideClick)
        {
            await CloseDialog();
        }
    }

    /// <summary>
    /// Closes the dialog
    /// </summary>
    private async Task CloseDialog()
    {
        if (IsOpen)
        {
            IsOpen = false;
            
            if (IsOpenChanged.HasDelegate)
            {
                await IsOpenChanged.InvokeAsync(false);
            }
        }
    }

    /// <summary>
    /// Opens the dialog
    /// </summary>
    public async Task OpenDialog()
    {
        if (!IsOpen)
        {
            IsOpen = true;
            
            if (IsOpenChanged.HasDelegate)
            {
                await IsOpenChanged.InvokeAsync(true);
            }
        }
    }
}