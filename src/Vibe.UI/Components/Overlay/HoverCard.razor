@namespace Vibe.UI.Components
@inherits Base.ThemedComponentBase

<div class="@CombinedClass" @onmouseenter="OnMouseEnter" @onmouseleave="OnMouseLeave">
    <div class="hovercard-trigger">
        @TriggerContent
    </div>
    
    @if (IsOpen)
    {
        <div class="hovercard-content @PositionClass" style="@ContentStyle">
            @Content
        </div>
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the trigger content.
    /// </summary>
    [Parameter]
    public RenderFragment TriggerContent { get; set; }

    /// <summary>
    /// Gets or sets the content of the hover card.
    /// </summary>
    [Parameter]
    public RenderFragment Content { get; set; }

    /// <summary>
    /// Gets or sets the position of the hover card.
    /// </summary>
    [Parameter]
    public string Position { get; set; } = "bottom";

    /// <summary>
    /// Gets or sets the delay before showing the hover card (in milliseconds).
    /// </summary>
    [Parameter]
    public int OpenDelay { get; set; } = 300;

    /// <summary>
    /// Gets or sets the delay before hiding the hover card (in milliseconds).
    /// </summary>
    [Parameter]
    public int CloseDelay { get; set; } = 200;

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-hovercard";

    /// <summary>
    /// Gets the CSS class for positioning the hover card.
    /// </summary>
    private string PositionClass => $"hovercard-{Position}";

    /// <summary>
    /// Gets the style for the content.
    /// </summary>
    private string ContentStyle => IsOpen ? "opacity: 1; visibility: visible;" : "opacity: 0; visibility: hidden;";

    /// <summary>
    /// Flag to track if the hover card is open.
    /// </summary>
    private bool IsOpen { get; set; }

    /// <summary>
    /// Timer for delayed showing/hiding of the hover card.
    /// </summary>
    private System.Timers.Timer? _timer;

    /// <summary>
    /// Handles when the mouse enters the trigger.
    /// </summary>
    private void OnMouseEnter()
    {
        _timer?.Dispose();
        _timer = new System.Timers.Timer(OpenDelay);
        _timer.Elapsed += (sender, e) =>
        {
            InvokeAsync(() =>
            {
                IsOpen = true;
                StateHasChanged();
            });
        };
        _timer.AutoReset = false;
        _timer.Start();
    }

    /// <summary>
    /// Handles when the mouse leaves the hover card.
    /// </summary>
    private void OnMouseLeave()
    {
        _timer?.Dispose();
        _timer = new System.Timers.Timer(CloseDelay);
        _timer.Elapsed += (sender, e) =>
        {
            InvokeAsync(() =>
            {
                IsOpen = false;
                StateHasChanged();
            });
        };
        _timer.AutoReset = false;
        _timer.Start();
    }

    /// <summary>
    /// Disposes the component.
    /// </summary>
    /// <param name="disposing">Whether this is being called from Dispose or the finalizer.</param>
    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            _timer?.Dispose();
        }
        base.Dispose(disposing);
    }
}