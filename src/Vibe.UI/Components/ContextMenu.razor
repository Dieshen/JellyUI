@namespace VibeUI.Components
@inherits Base.ThemedComponentBase
@inject IJSRuntime JSRuntime

<div class="@CombinedClass" @oncontextmenu="OnContextMenu" @oncontextmenu:preventDefault @onmousedown="OnTriggerMouseDown">
    <div class="context-trigger">
        @TriggerContent
    </div>

    @if (IsOpen)
    {
        <div class="context-content" style="left: @PositionX; top: @PositionY;">
            @Content
        </div>
        
        <div class="context-backdrop" @onclick="CloseMenu"></div>
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the trigger content.
    /// </summary>
    [Parameter]
    public RenderFragment TriggerContent { get; set; }

    /// <summary>
    /// Gets or sets the context menu content.
    /// </summary>
    [Parameter]
    public RenderFragment Content { get; set; }

    /// <summary>
    /// Gets or sets whether the context menu is disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Gets or sets the callback when the context menu opens.
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnOpen { get; set; }

    /// <summary>
    /// Gets or sets the callback when the context menu closes.
    /// </summary>
    [Parameter]
    public EventCallback OnClose { get; set; }

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-context-menu";

    /// <summary>
    /// Flag to track if the context menu is open.
    /// </summary>
    private bool IsOpen = false;

    /// <summary>
    /// The X position of the context menu.
    /// </summary>
    private string PositionX = "0px";

    /// <summary>
    /// The Y position of the context menu.
    /// </summary>
    private string PositionY = "0px";

    /// <summary>
    /// Handles the context menu event.
    /// </summary>
    /// <param name="e">The mouse event args.</param>
    private async Task OnContextMenu(MouseEventArgs e)
    {
        if (Disabled)
            return;

        // Calculate position, ensuring the menu stays within viewport bounds
        PositionX = $"{e.ClientX}px";
        PositionY = $"{e.ClientY}px";
        IsOpen = true;

        await OnOpen.InvokeAsync(e);
    }

    /// <summary>
    /// Handles the mouse down event on the trigger.
    /// </summary>
    private void OnTriggerMouseDown(MouseEventArgs e)
    {
        // Handle only if it's not a right click to prevent duplicate openings
        if (e.Button != 2 && IsOpen)
        {
            CloseMenu();
        }
    }

    /// <summary>
    /// Closes the context menu.
    /// </summary>
    private async Task CloseMenu()
    {
        if (IsOpen)
        {
            IsOpen = false;
            await OnClose.InvokeAsync();
        }
    }

    /// <summary>
    /// Set up global event handlers when component is initialized.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            // In a real implementation, you would set up a JS interop to handle 
            // clicks outside the context menu to close it and to handle viewport boundaries
        }
    }
}