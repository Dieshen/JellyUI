@namespace Vibe.UI.Components
@inherits Base.ThemedComponentBase

<nav class="@CombinedClass" role="navigation" aria-label="pagination">
    <ul class="pagination-list">
        @if (ShowFirstLast)
        {
            <li class="pagination-item">
                <button class="pagination-button pagination-first @(CurrentPage == 1 ? "disabled" : "")" 
                    @onclick="() => OnPageChange(1)" 
                    disabled="@(CurrentPage == 1)">
                    <span class="pagination-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m11 17-5-5 5-5"/><path d="m18 17-5-5 5-5"/></svg>
                    </span>
                </button>
            </li>
        }

        <li class="pagination-item">
            <button class="pagination-button pagination-prev @(CurrentPage == 1 ? "disabled" : "")" 
                @onclick="() => OnPageChange(CurrentPage - 1)" 
                disabled="@(CurrentPage == 1)">
                <span class="pagination-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"/></svg>
                </span>
            </button>
        </li>

        @foreach (var page in GetPageNumbers())
        {
            if (page == -1)
            {
                <li class="pagination-item">
                    <span class="pagination-ellipsis">...</span>
                </li>
            }
            else
            {
                <li class="pagination-item">
                    <button class="pagination-button pagination-link @(page == CurrentPage ? "active" : "")" 
                        @onclick="() => OnPageChange(page)">
                        @page
                    </button>
                </li>
            }
        }

        <li class="pagination-item">
            <button class="pagination-button pagination-next @(CurrentPage == TotalPages ? "disabled" : "")" 
                @onclick="() => OnPageChange(CurrentPage + 1)" 
                disabled="@(CurrentPage == TotalPages)">
                <span class="pagination-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"/></svg>
                </span>
            </button>
        </li>

        @if (ShowFirstLast)
        {
            <li class="pagination-item">
                <button class="pagination-button pagination-last @(CurrentPage == TotalPages ? "disabled" : "")" 
                    @onclick="() => OnPageChange(TotalPages)" 
                    disabled="@(CurrentPage == TotalPages)">
                    <span class="pagination-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m13 17 5-5-5-5"/><path d="m6 17 5-5-5-5"/></svg>
                    </span>
                </button>
            </li>
        }
    </ul>
</nav>

@code {
    /// <summary>
    /// Gets or sets the current page number.
    /// </summary>
    [Parameter]
    public int CurrentPage { get; set; } = 1;

    /// <summary>
    /// Gets or sets the total number of pages.
    /// </summary>
    [Parameter]
    public int TotalPages { get; set; } = 1;

    /// <summary>
    /// Gets or sets the maximum number of page buttons to show.
    /// </summary>
    [Parameter]
    public int MaxVisiblePages { get; set; } = 7;

    /// <summary>
    /// Gets or sets whether to show first and last page buttons.
    /// </summary>
    [Parameter]
    public bool ShowFirstLast { get; set; } = false;

    /// <summary>
    /// Gets or sets the callback when the page changes.
    /// </summary>
    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-pagination";

    /// <summary>
    /// Calculates which page numbers to display.
    /// </summary>
    /// <returns>A list of page numbers, with -1 representing ellipsis.</returns>
    private List<int> GetPageNumbers()
    {
        var pages = new List<int>();
        
        if (TotalPages <= MaxVisiblePages)
        {
            // If total pages is less than or equal to max visible pages, show all
            for (int i = 1; i <= TotalPages; i++)
            {
                pages.Add(i);
            }
        }
        else
        {
            // Always show first page
            pages.Add(1);
            
            int leftSide = Math.Max(2, CurrentPage - (MaxVisiblePages - 3) / 2);
            int rightSide = Math.Min(TotalPages - 1, leftSide + MaxVisiblePages - 4);
            
            if (leftSide > 2)
            {
                pages.Add(-1); // Add ellipsis
            }
            
            for (int i = leftSide; i <= rightSide; i++)
            {
                pages.Add(i);
            }
            
            if (rightSide < TotalPages - 1)
            {
                pages.Add(-1); // Add ellipsis
            }
            
            // Always show last page
            pages.Add(TotalPages);
        }
        
        return pages;
    }

    /// <summary>
    /// Handles when a page is selected.
    /// </summary>
    /// <param name="page">The selected page number.</param>
    private async Task OnPageChange(int page)
    {
        if (page >= 1 && page <= TotalPages && page != CurrentPage)
        {
            CurrentPage = page;
            await PageChanged.InvokeAsync(page);
        }
    }
}