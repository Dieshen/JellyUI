@inherits Vibe.UI.Base.ThemedComponentBase

<div class="@CombinedClass" @attributes="AdditionalAttributes">
    <div class="vibe-tabs-list" role="tablist">
        @foreach (var tab in _tabs)
        {
            <button type="button"
                    class="vibe-tabs-trigger @(tab.Id == ActiveTabId ? "vibe-tabs-trigger-active" : "")"
                    role="tab"
                    aria-selected="@(tab.Id == ActiveTabId)"
                    disabled="@(tab.Disabled)"
                    @onclick="() => ActivateTab(tab.Id)">
                @tab.Title
            </button>
        }
    </div>
    <div class="vibe-tabs-content">
        @foreach (var tab in _tabs)
        {
            <div class="vibe-tabs-panel @(tab.Id == ActiveTabId ? "vibe-tabs-panel-active" : "")"
                 role="tabpanel"
                 id="@tab.Id-panel">
                @tab.Content
            </div>
        }
    </div>
</div>

@code {
    private List<TabItem> _tabs = new();

    /// <summary>
    /// Gets or sets the active tab ID
    /// </summary>
    [Parameter]
    public string ActiveTabId { get; set; }

    /// <summary>
    /// Gets or sets the callback for when the active tab changes
    /// </summary>
    [Parameter]
    public EventCallback<string> ActiveTabIdChanged { get; set; }

    /// <summary>
    /// Gets or sets the callback for when a tab is activated
    /// </summary>
    [Parameter]
    public EventCallback<TabActivatedEventArgs> OnTabActivated { get; set; }

    /// <summary>
    /// Gets or sets the tab items
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <inheritdoc/>
    protected override string ComponentClass => "vibe-tabs";

    /// <summary>
    /// Initializes the component
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    /// <summary>
    /// Adds a tab to the collection
    /// </summary>
    /// <param name="tab">The tab to add</param>
    internal void AddTab(TabItem tab)
    {
        _tabs.Add(tab);
        
        // If this is the first tab or if it's set to be the default active tab,
        // make it the active tab
        if ((string.IsNullOrEmpty(ActiveTabId) && _tabs.Count == 1) || 
            tab.DefaultActive)
        {
            ActiveTabId = tab.Id;
        }
        
        StateHasChanged();
    }

    /// <summary>
    /// Removes a tab from the collection
    /// </summary>
    /// <param name="tabId">The ID of the tab to remove</param>
    internal void RemoveTab(string tabId)
    {
        var tab = _tabs.FirstOrDefault(t => t.Id == tabId);
        if (tab != null)
        {
            _tabs.Remove(tab);

            // If the removed tab was the active tab, activate the first tab that's not disabled
            if (tabId == ActiveTabId && _tabs.Count > 0)
            {
                var nextTab = _tabs.FirstOrDefault(t => !t.Disabled);
                if (nextTab != null)
                {
                    ActiveTabId = nextTab.Id;
                }
            }

            StateHasChanged();
        }
    }

    /// <summary>
    /// Activates a tab
    /// </summary>
    /// <param name="tabId">The ID of the tab to activate</param>
    private async Task ActivateTab(string tabId)
    {
        var tab = _tabs.FirstOrDefault(t => t.Id == tabId);
        if (tab != null && !tab.Disabled && tabId != ActiveTabId)
        {
            ActiveTabId = tabId;
            
            if (ActiveTabIdChanged.HasDelegate)
            {
                await ActiveTabIdChanged.InvokeAsync(tabId);
            }
            
            if (OnTabActivated.HasDelegate)
            {
                await OnTabActivated.InvokeAsync(new TabActivatedEventArgs(tabId, tab.Title));
            }
        }
    }

    /// <summary>
    /// Tab item
    /// </summary>
    internal class TabItem
    {
        /// <summary>
        /// Gets the ID of the tab
        /// </summary>
        public string Id { get; }
        
        /// <summary>
        /// Gets the title of the tab
        /// </summary>
        public RenderFragment Title { get; }
        
        /// <summary>
        /// Gets the content of the tab
        /// </summary>
        public RenderFragment Content { get; }
        
        /// <summary>
        /// Gets whether the tab is disabled
        /// </summary>
        public bool Disabled { get; }
        
        /// <summary>
        /// Gets whether the tab should be active by default
        /// </summary>
        public bool DefaultActive { get; }

        /// <summary>
        /// Creates a new instance of <see cref="TabItem"/>
        /// </summary>
        /// <param name="id">The ID of the tab</param>
        /// <param name="title">The title of the tab</param>
        /// <param name="content">The content of the tab</param>
        /// <param name="disabled">Whether the tab is disabled</param>
        /// <param name="defaultActive">Whether the tab should be active by default</param>
        public TabItem(string id, RenderFragment title, RenderFragment content, bool disabled, bool defaultActive)
        {
            Id = id;
            Title = title;
            Content = content;
            Disabled = disabled;
            DefaultActive = defaultActive;
        }
    }

    /// <summary>
    /// Tab activated event arguments
    /// </summary>
    public class TabActivatedEventArgs
    {
        /// <summary>
        /// Gets the ID of the tab
        /// </summary>
        public string TabId { get; }
        
        /// <summary>
        /// Gets the title of the tab as a string (for convenience)
        /// </summary>
        public RenderFragment Title { get; }

        /// <summary>
        /// Creates a new instance of <see cref="TabActivatedEventArgs"/>
        /// </summary>
        /// <param name="tabId">The ID of the tab</param>
        /// <param name="title">The title of the tab</param>
        public TabActivatedEventArgs(string tabId, RenderFragment title)
        {
            TabId = tabId;
            Title = title;
        }
    }
}