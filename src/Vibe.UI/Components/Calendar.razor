@namespace VibeUI.Components
@inherits Base.ThemedComponentBase

<div class="@CombinedClass">
    <div class="calendar-header">
        <button type="button" class="calendar-nav-button" @onclick="PreviousMonth">
            <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M8.84182 3.13514C9.04327 3.32401 9.05348 3.64042 8.86462 3.84188L5.43521 7.49991L8.86462 11.1579C9.05348 11.3594 9.04327 11.6758 8.84182 11.8647C8.64036 12.0535 8.32394 12.0433 8.13508 11.8419L4.38508 7.84188C4.20477 7.64955 4.20477 7.35027 4.38508 7.15794L8.13508 3.15794C8.32394 2.95648 8.64036 2.94628 8.84182 3.13514Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path>
            </svg>
        </button>
        <div class="calendar-month-year">
            @CurrentMonthYear
        </div>
        <button type="button" class="calendar-nav-button" @onclick="NextMonth">
            <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path>
            </svg>
        </button>
    </div>
    <div class="calendar-weekdays">
        @foreach (var day in DayNames)
        {
            <div class="calendar-weekday">@day</div>
        }
    </div>
    <div class="calendar-days">
        @for (var i = 0; i < FirstDayOfMonth; i++)
        {
            <div class="calendar-day empty"></div>
        }
        @for (var day = 1; day <= DaysInMonth; day++)
        {
            var currentDate = new DateTime(CurrentDate.Year, CurrentDate.Month, day);
            var isSelected = IsSelected(currentDate);
            var isToday = IsToday(currentDate);
            var isOutsideRange = IsOutsideRange(currentDate);
            
            <button type="button" 
                   class="calendar-day @(isSelected ? "selected" : "") @(isToday ? "today" : "") @(isOutsideRange ? "disabled" : "")"
                   @onclick="() => OnDateSelected(currentDate)"
                   disabled="@isOutsideRange">
                @day
            </button>
        }
    </div>
</div>

@code {
    /// <summary>
    /// Gets or sets the selected date.
    /// </summary>
    [Parameter]
    public DateTime? SelectedDate { get; set; }

    /// <summary>
    /// Gets or sets the minimum selectable date.
    /// </summary>
    [Parameter]
    public DateTime? MinDate { get; set; }

    /// <summary>
    /// Gets or sets the maximum selectable date.
    /// </summary>
    [Parameter]
    public DateTime? MaxDate { get; set; }

    /// <summary>
    /// Gets or sets the callback when a date is selected.
    /// </summary>
    [Parameter]
    public EventCallback<DateTime> DateSelected { get; set; }

    /// <summary>
    /// Gets or sets the callback when the selected date changes.
    /// </summary>
    [Parameter]
    public EventCallback<DateTime?> SelectedDateChanged { get; set; }

    /// <summary>
    /// Gets the component CSS class name.
    /// </summary>
    protected override string ComponentClass => "vibe-calendar";

    /// <summary>
    /// The current date displayed in the calendar.
    /// </summary>
    private DateTime CurrentDate { get; set; } = DateTime.Today;

    /// <summary>
    /// The days of the week.
    /// </summary>
    private string[] DayNames { get; } = { "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" };

    /// <summary>
    /// Gets the first day of the month (0-6, where 0 is Sunday).
    /// </summary>
    private int FirstDayOfMonth => new DateTime(CurrentDate.Year, CurrentDate.Month, 1).DayOfWeek.GetHashCode();

    /// <summary>
    /// Gets the number of days in the current month.
    /// </summary>
    private int DaysInMonth => DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month);

    /// <summary>
    /// Gets the formatted month and year string.
    /// </summary>
    private string CurrentMonthYear => CurrentDate.ToString("MMMM yyyy");

    /// <summary>
    /// Initializes the component.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (SelectedDate.HasValue)
        {
            CurrentDate = new DateTime(SelectedDate.Value.Year, SelectedDate.Value.Month, 1);
        }
    }

    /// <summary>
    /// Navigates to the previous month.
    /// </summary>
    private void PreviousMonth()
    {
        CurrentDate = CurrentDate.AddMonths(-1);
    }

    /// <summary>
    /// Navigates to the next month.
    /// </summary>
    private void NextMonth()
    {
        CurrentDate = CurrentDate.AddMonths(1);
    }

    /// <summary>
    /// Handles when a date is selected.
    /// </summary>
    /// <param name="date">The selected date.</param>
    private async Task OnDateSelected(DateTime date)
    {
        if (IsOutsideRange(date))
            return;

        await DateSelected.InvokeAsync(date);
        await SelectedDateChanged.InvokeAsync(date);
    }

    /// <summary>
    /// Checks if a date is selected.
    /// </summary>
    /// <param name="date">The date to check.</param>
    /// <returns>True if the date is selected, false otherwise.</returns>
    private bool IsSelected(DateTime date)
    {
        return SelectedDate.HasValue && date.Date == SelectedDate.Value.Date;
    }

    /// <summary>
    /// Checks if a date is today.
    /// </summary>
    /// <param name="date">The date to check.</param>
    /// <returns>True if the date is today, false otherwise.</returns>
    private bool IsToday(DateTime date)
    {
        return date.Date == DateTime.Today;
    }

    /// <summary>
    /// Checks if a date is outside the allowed range.
    /// </summary>
    /// <param name="date">The date to check.</param>
    /// <returns>True if the date is outside the allowed range, false otherwise.</returns>
    private bool IsOutsideRange(DateTime date)
    {
        return (MinDate.HasValue && date < MinDate.Value.Date) || (MaxDate.HasValue && date > MaxDate.Value.Date);
    }
}